#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, enum'—ã –∏ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
"""

import os
import sys
import time
import psycopg2
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend –≤ PYTHONPATH
sys.path.insert(0, os.path.dirname(__file__))

from models import Base, User
from security import get_password_hash
import models_package.ecommerce
import models_package.social
import models_package.tasks
import models_package.content
import models_package.analytics


def wait_for_postgres(max_retries=30, delay=2):
    """–ñ–¥–µ–º –ø–æ–∫–∞ PostgreSQL —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω"""
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL...")

    for attempt in range(max_retries):
        try:
            conn = psycopg2.connect(
                host=os.getenv("POSTGRES_HOST", "postgres"),
                port=os.getenv("POSTGRES_PORT", "5432"),
                user=os.getenv("POSTGRES_USER", "my_user"),
                password=os.getenv("POSTGRES_PASSWORD", "my_password"),
                database=os.getenv("POSTGRES_DB", "my_database"),
            )
            conn.close()
            print("‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω!")
            return True
        except psycopg2.OperationalError:
            if attempt < max_retries - 1:
                print(
                    f"‚è≥ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries} - PostgreSQL –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤, –∂–¥–µ–º {delay}—Å..."
                )
                time.sleep(delay)
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL")
                return False
    return False


def create_databases():
    """–°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üóÑÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö...")

    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = psycopg2.connect(
            host=os.getenv("POSTGRES_HOST", "postgres"),
            port=os.getenv("POSTGRES_PORT", "5432"),
            user=os.getenv("POSTGRES_USER", "my_user"),
            password=os.getenv("POSTGRES_PASSWORD", "my_password"),
            database=os.getenv("POSTGRES_DB", "my_database"),
        )
        conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
        cursor = conn.cursor()

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("SELECT 1 FROM pg_database WHERE datname = 'test_database'")
        if not cursor.fetchone():
            cursor.execute("CREATE DATABASE test_database")
            print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö test_database")
        else:
            print("‚ÑπÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö test_database —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        cursor.close()
        conn.close()

        # –°–æ–∑–¥–∞–µ–º enum'—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–∑–µ
        create_enums("my_database")

        # –°–æ–∑–¥–∞–µ–º enum'—ã –≤ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑–µ
        create_enums("test_database")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False


def create_enums(database_name):
    """–°–æ–∑–¥–∞–µ–º enum'—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print(f"üîß –°–æ–∑–¥–∞–Ω–∏–µ enum'–æ–≤ –≤ –±–∞–∑–µ {database_name}...")

    try:
        conn = psycopg2.connect(
            host=os.getenv("POSTGRES_HOST", "postgres"),
            port=os.getenv("POSTGRES_PORT", "5432"),
            user=os.getenv("POSTGRES_USER", "my_user"),
            password=os.getenv("POSTGRES_PASSWORD", "my_password"),
            database=database_name,
        )
        conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
        cursor = conn.cursor()

        # –°–æ–∑–¥–∞–µ–º enum'—ã –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        enums = [
            ("taskstatus", "('todo', 'in_progress', 'review', 'done')"),
            ("taskpriority", "('low', 'medium', 'high', 'urgent')"),
            ("articlestatus", "('draft', 'published', 'archived')"),
        ]

        for enum_name, enum_values in enums:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ enum
            cursor.execute("SELECT 1 FROM pg_type WHERE typname = %s", (enum_name,))
            if not cursor.fetchone():
                cursor.execute(f"CREATE TYPE {enum_name} AS ENUM {enum_values}")
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω enum {enum_name}")
            else:
                print(f"‚ÑπÔ∏è Enum {enum_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        print(f"‚úÖ Enum'—ã —Å–æ–∑–¥–∞–Ω—ã –≤ –±–∞–∑–µ {database_name}")

        cursor.close()
        conn.close()
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ enum'–æ–≤ –≤ {database_name}: {e}")
        return False


def create_tables(database_url):
    """–°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print(f"üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")

    try:
        engine = create_engine(database_url)
        Base.metadata.create_all(bind=engine)
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        return False


def create_test_data(database_url):
    """–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    print("üë§ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")

    try:
        engine = create_engine(database_url)
        SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
        db = SessionLocal()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        existing_user = db.query(User).filter(User.email == "test@example.com").first()
        if not existing_user:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            test_user = User(
                email="test@example.com",
                username="testuser",
                full_name="Test User",
                hashed_password=get_password_hash("testpassword123"),
                is_active=True,
                is_verified=True,
            )
            db.add(test_user)
            db.commit()
            print("‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: test@example.com")
        else:
            print("‚ÑπÔ∏è –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            test_user = existing_user

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è E-commerce
        create_ecommerce_test_data(db, test_user)

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Social Network
        create_social_test_data(db, test_user)

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Task Management
        create_tasks_test_data(db, test_user)

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Content Management
        create_content_test_data(db, test_user)

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Analytics
        create_analytics_test_data(db, test_user)

        db.close()
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False


def create_ecommerce_test_data(db, user):
    """–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è E-commerce"""
    print("üõí –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö E-commerce...")

    from models_package.ecommerce import Product, Order, OrderItem

    # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä—ã
    products_data = [
        {
            "name": "Laptop Pro 15",
            "description": "High-performance laptop for professionals",
            "price": 1299.99,
            "category": "Electronics",
            "image_url": "https://via.placeholder.com/300x200?text=Laptop+Pro+15",
            "stock_quantity": 10,
        },
        {
            "name": "Wireless Headphones",
            "description": "Premium wireless headphones with noise cancellation",
            "price": 199.99,
            "category": "Audio",
            "image_url": "https://via.placeholder.com/300x200?text=Headphones",
            "stock_quantity": 25,
        },
        {
            "name": "Smartphone X",
            "description": "Latest smartphone with advanced features",
            "price": 899.99,
            "category": "Electronics",
            "image_url": "https://via.placeholder.com/300x200?text=Smartphone+X",
            "stock_quantity": 15,
        },
        {
            "name": "Coffee Maker",
            "description": "Automatic coffee maker for home use",
            "price": 149.99,
            "category": "Appliances",
            "image_url": "https://via.placeholder.com/300x200?text=Coffee+Maker",
            "stock_quantity": 8,
        },
        {
            "name": "Running Shoes",
            "description": "Comfortable running shoes for athletes",
            "price": 129.99,
            "category": "Sports",
            "image_url": "https://via.placeholder.com/300x200?text=Running+Shoes",
            "stock_quantity": 20,
        },
    ]

    for product_data in products_data:
        existing_product = (
            db.query(Product).filter(Product.name == product_data["name"]).first()
        )
        if not existing_product:
            product = Product(**product_data)
            db.add(product)

    db.commit()
    print("‚úÖ –°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã")


def create_social_test_data(db, user):
    """–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Social Network"""
    print("üë• –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö Social Network...")

    from models_package.social import Post, Comment, PostLike

    # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç—ã
    posts_data = [
        {
            "content": "–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ç—å! üéâ",
            "user_id": user.id,
            "is_public": True,
        },
        {
            "content": "–¢–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–∫–æ–Ω—á–∏–ª —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –Ω–æ–≤—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º. –û—á–µ–Ω—å –¥–æ–≤–æ–ª–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º! üí™",
            "user_id": user.id,
            "is_public": True,
        },
        {
            "content": "–ö—Ç–æ-–Ω–∏–±—É–¥—å –∑–Ω–∞–µ—Ç —Ö–æ—Ä–æ—à–∏–µ –∫—É—Ä—Å—ã –ø–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è? ü§î",
            "user_id": user.id,
            "is_public": True,
        },
        {
            "content": "–°–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω–∞—è –ø–æ–≥–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≥—É–ª–∫–∏! ‚òÄÔ∏è",
            "user_id": user.id,
            "is_public": True,
        },
        {
            "content": "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã —Å Selenium WebDriver, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞! üöÄ",
            "user_id": user.id,
            "is_public": True,
        },
    ]

    for post_data in posts_data:
        existing_post = (
            db.query(Post).filter(Post.content == post_data["content"]).first()
        )
        if not existing_post:
            post = Post(**post_data)
            db.add(post)

    db.commit()
    print("‚úÖ –°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã")


def create_tasks_test_data(db, user):
    """–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Task Management"""
    print("üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö Task Management...")

    from models_package.tasks import Board, Card, TaskStatus, TaskPriority

    # –°–æ–∑–¥–∞–µ–º –¥–æ—Å–∫–∏
    boards_data = [
        {
            "name": "–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
            "description": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ç–æ—Ä–æ–≤",
            "user_id": user.id,
            "is_public": True,
        },
        {
            "name": "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API",
            "description": "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤",
            "user_id": user.id,
            "is_public": True,
        },
        {
            "name": "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
            "description": "–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã",
            "user_id": user.id,
            "is_public": True,
        },
    ]

    for board_data in boards_data:
        existing_board = (
            db.query(Board).filter(Board.name == board_data["name"]).first()
        )
        if not existing_board:
            board = Board(**board_data)
            db.add(board)
            db.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –¥–æ—Å–∫–∏

            # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –¥–æ—Å–∫–∏
            cards_data = [
                {
                    "title": f"–ó–∞–¥–∞—á–∞ 1 –¥–ª—è {board.name}",
                    "description": f"–û–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞—á–∏ –¥–æ—Å–∫–∏ {board.name}",
                    "board_id": board.id,
                    "assigned_to_id": user.id,
                    "status": "todo",
                    "priority": "high",
                },
                {
                    "title": f"–ó–∞–¥–∞—á–∞ 2 –¥–ª—è {board.name}",
                    "description": f"–û–ø–∏—Å–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–π –∑–∞–¥–∞—á–∏ –¥–æ—Å–∫–∏ {board.name}",
                    "board_id": board.id,
                    "assigned_to_id": user.id,
                    "status": "in_progress",
                    "priority": "medium",
                },
                {
                    "title": f"–ó–∞–¥–∞—á–∞ 3 –¥–ª—è {board.name}",
                    "description": f"–û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ—Ç—å–µ–π –∑–∞–¥–∞—á–∏ –¥–æ—Å–∫–∏ {board.name}",
                    "board_id": board.id,
                    "assigned_to_id": user.id,
                    "status": "done",
                    "priority": "low",
                },
            ]

            for card_data in cards_data:
                existing_card = (
                    db.query(Card).filter(Card.title == card_data["title"]).first()
                )
                if not existing_card:
                    card = Card(**card_data)
                    db.add(card)

    db.commit()
    print("‚úÖ –°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–æ—Å–∫–∏ –∏ –∫–∞—Ä—Ç–æ—á–∫–∏")


def create_content_test_data(db, user):
    """–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Content Management"""
    print("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö Content Management...")

    from models_package.content import Article, Category

    # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    categories_data = [
        {
            "name": "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
            "description": "–°—Ç–∞—Ç—å–∏ –æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö",
            "slug": "tehnologii",
        },
        {
            "name": "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
            "description": "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
            "slug": "testirovanie",
        },
        {
            "name": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
            "description": "–°—Ç–∞—Ç—å–∏ –æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
            "slug": "programmirovanie",
        },
        {
            "name": "–û–±—É—á–µ–Ω–∏–µ",
            "description": "–û–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞",
            "slug": "obuchenie",
        },
    ]

    for category_data in categories_data:
        existing_category = (
            db.query(Category).filter(Category.name == category_data["name"]).first()
        )
        if not existing_category:
            category = Category(**category_data)
            db.add(category)

    db.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–π

    # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Å—Å—ã–ª–æ–∫ –≤ —Å—Ç–∞—Ç—å—è—Ö
    tech_category = db.query(Category).filter(Category.name == "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏").first()
    testing_category = (
        db.query(Category).filter(Category.name == "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ").first()
    )
    programming_category = (
        db.query(Category).filter(Category.name == "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ").first()
    )

    # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—å–∏
    articles_data = [
        {
            "title": "–í–≤–µ–¥–µ–Ω–∏–µ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
            "content": "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - —ç—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ –±–µ–∑ —É—á–∞—Å—Ç–∏—è —á–µ–ª–æ–≤–µ–∫–∞...",
            "author_id": user.id,
            "category_id": testing_category.id,
            "status": "published",
            "slug": "vvedenie-v-avtomatizaciyu-testirovaniya",
            "views_count": 150,
        },
        {
            "title": "Selenium WebDriver: –æ—Å–Ω–æ–≤—ã —Ä–∞–±–æ—Ç—ã",
            "content": "Selenium WebDriver - —ç—Ç–æ –º–æ—â–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π...",
            "author_id": user.id,
            "category_id": testing_category.id,
            "status": "published",
            "slug": "selenium-webdriver-osnovy-raboty",
            "views_count": 89,
        },
        {
            "title": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é API",
            "content": "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —è–≤–ª—è–µ—Ç—Å—è –≤–∞–∂–Ω–æ–π —á–∞—Å—Ç—å—é –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...",
            "author_id": user.id,
            "category_id": testing_category.id,
            "status": "published",
            "slug": "sovremennye-podhody-k-testirovaniyu-api",
            "views_count": 67,
        },
        {
            "title": "Python –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
            "content": "Python - –æ–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —è–∑—ã–∫–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...",
            "author_id": user.id,
            "category_id": programming_category.id,
            "status": "published",
            "slug": "python-dlya-avtomatizacii-testirovaniya",
            "views_count": 203,
        },
        {
            "title": "Docker –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏",
            "content": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Docker –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã...",
            "author_id": user.id,
            "category_id": tech_category.id,
            "status": "published",
            "slug": "docker-v-testirovanii-luchshie-praktiki",
            "views_count": 134,
        },
    ]

    for article_data in articles_data:
        existing_article = (
            db.query(Article).filter(Article.title == article_data["title"]).first()
        )
        if not existing_article:
            article = Article(**article_data)
            db.add(article)

    db.commit()
    print("‚úÖ –°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")


def create_analytics_test_data(db, user):
    """–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Analytics"""
    print("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö Analytics...")

    from models_package.analytics import (
        Metric,
        MetricData,
        Report,
        Dashboard,
        DashboardWidget,
    )

    # –°–æ–∑–¥–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    metrics_data = [
        {
            "name": "page_views",
            "description": "–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü",
            "metric_type": "counter",
            "unit": "views",
        },
        {
            "name": "unique_users",
            "description": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            "metric_type": "gauge",
            "unit": "users",
        },
        {
            "name": "orders_count",
            "description": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤",
            "metric_type": "counter",
            "unit": "orders",
        },
        {
            "name": "revenue",
            "description": "–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞",
            "metric_type": "gauge",
            "unit": "currency",
        },
        {
            "name": "posts_count",
            "description": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏",
            "metric_type": "counter",
            "unit": "posts",
        },
        {
            "name": "tasks_completed",
            "description": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á",
            "metric_type": "counter",
            "unit": "tasks",
        },
    ]

    created_metrics = []
    for metric_data in metrics_data:
        existing_metric = (
            db.query(Metric).filter(Metric.name == metric_data["name"]).first()
        )
        if not existing_metric:
            metric = Metric(**metric_data)
            db.add(metric)
            created_metrics.append(metric)
        else:
            created_metrics.append(existing_metric)

    db.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –º–µ—Ç—Ä–∏–∫

    # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–µ—Ç—Ä–∏–∫
    metric_values = [
        {
            "metric": created_metrics[0],
            "value": 1250.0,
            "labels": {"page": "dashboard"},
        },
        {"metric": created_metrics[1], "value": 89.0, "labels": {"period": "daily"}},
        {
            "metric": created_metrics[2],
            "value": 456.0,
            "labels": {"status": "completed"},
        },
        {
            "metric": created_metrics[3],
            "value": 125000.0,
            "labels": {"currency": "USD"},
        },
        {"metric": created_metrics[4], "value": 234.0, "labels": {"type": "public"}},
        {"metric": created_metrics[5], "value": 156.0, "labels": {"priority": "high"}},
    ]

    for value_data in metric_values:
        metric_data = MetricData(
            metric_id=value_data["metric"].id,
            value=value_data["value"],
            labels=value_data["labels"],
        )
        db.add(metric_data)

    # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
    report = Report(
        name="–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç",
        description="–°–≤–æ–¥–∫–∞ –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º –º–µ—Ç—Ä–∏–∫–∞–º –∑–∞ –Ω–µ–¥–µ–ª—é",
        report_type="weekly_summary",
        parameters={
            "period": "7d",
            "metrics": ["page_views", "unique_users", "revenue"],
        },
        created_by_id=user.id,
        is_public=True,
    )
    db.add(report)

    # –°–æ–∑–¥–∞–µ–º –¥–∞—à–±–æ—Ä–¥
    dashboard = Dashboard(
        name="–û—Å–Ω–æ–≤–Ω–æ–π –¥–∞—à–±–æ—Ä–¥",
        description="–ì–ª–∞–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ —Å –∫–ª—é—á–µ–≤—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏",
        created_by_id=user.id,
        is_public=True,
        layout_config={"columns": 4, "rows": 3},
    )
    db.add(dashboard)
    db.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –¥–∞—à–±–æ—Ä–¥–∞

    # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç—ã –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
    widgets_data = [
        {
            "widget_type": "metric_card",
            "title": "–ü—Ä–æ—Å–º–æ—Ç—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü",
            "config": {"metric_id": created_metrics[0].id, "format": "number"},
            "position_x": 0,
            "position_y": 0,
            "width": 2,
            "height": 1,
        },
        {
            "widget_type": "metric_card",
            "title": "–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
            "config": {"metric_id": created_metrics[1].id, "format": "number"},
            "position_x": 2,
            "position_y": 0,
            "width": 2,
            "height": 1,
        },
        {
            "widget_type": "chart",
            "title": "–í—ã—Ä—É—á–∫–∞ –ø–æ –¥–Ω—è–º",
            "config": {"metric_id": created_metrics[3].id, "chart_type": "line"},
            "position_x": 0,
            "position_y": 1,
            "width": 4,
            "height": 2,
        },
    ]

    for widget_data in widgets_data:
        widget = DashboardWidget(dashboard_id=dashboard.id, **widget_data)
        db.add(widget)

    db.commit()
    print("‚úÖ –°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏, –æ—Ç—á–µ—Ç—ã –∏ –¥–∞—à–±–æ—Ä–¥—ã")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

    # –ñ–¥–µ–º PostgreSQL
    if not wait_for_postgres():
        sys.exit(1)

    # –°–æ–∑–¥–∞–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ enum'—ã
    if not create_databases():
        sys.exit(1)

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–∑–µ
    main_db_url = f"postgresql://{os.getenv('POSTGRES_USER', 'my_user')}:{os.getenv('POSTGRES_PASSWORD', 'my_password')}@{os.getenv('POSTGRES_HOST', 'postgres')}:{os.getenv('POSTGRES_PORT', '5432')}/{os.getenv('POSTGRES_DB', 'my_database')}"
    if not create_tables(main_db_url):
        sys.exit(1)

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–∑–µ
    if not create_test_data(main_db_url):
        sys.exit(1)

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑–µ
    test_db_url = f"postgresql://{os.getenv('POSTGRES_USER', 'my_user')}:{os.getenv('POSTGRES_PASSWORD', 'my_password')}@{os.getenv('POSTGRES_HOST', 'postgres')}:{os.getenv('POSTGRES_PORT', '5432')}/test_database"
    if not create_tables(test_db_url):
        sys.exit(1)

    print("üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")


if __name__ == "__main__":
    main()
