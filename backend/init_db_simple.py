#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, enum'—ã –∏ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
"""

import os
import sys
import time
import psycopg2
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT


def wait_for_postgres(max_retries=30, delay=2):
    """–ñ–¥–µ–º –ø–æ–∫–∞ PostgreSQL —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω"""
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL...")

    for attempt in range(max_retries):
        try:
            conn = psycopg2.connect(
                host=os.getenv("POSTGRES_HOST", "postgres"),
                port=os.getenv("POSTGRES_PORT", "5432"),
                user=os.getenv("POSTGRES_USER", "my_user"),
                password=os.getenv("POSTGRES_PASSWORD", "my_password"),
                database=os.getenv("POSTGRES_DB", "my_database"),
            )
            conn.close()
            print("‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω!")
            return True
        except psycopg2.OperationalError:
            if attempt < max_retries - 1:
                print(
                    f"‚è≥ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries} - PostgreSQL –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤, –∂–¥–µ–º {delay}—Å..."
                )
                time.sleep(delay)
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL")
                return False
    return False


def create_test_database():
    """–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    print("üóÑÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

    try:
        conn = psycopg2.connect(
            host=os.getenv("POSTGRES_HOST", "postgres"),
            port=os.getenv("POSTGRES_PORT", "5432"),
            user=os.getenv("POSTGRES_USER", "my_user"),
            password=os.getenv("POSTGRES_PASSWORD", "my_password"),
            database=os.getenv("POSTGRES_DB", "my_database"),
        )
        conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
        cursor = conn.cursor()

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("SELECT 1 FROM pg_database WHERE datname = 'test_database'")
        if not cursor.fetchone():
            cursor.execute("CREATE DATABASE test_database")
            print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö test_database")
        else:
            print("‚ÑπÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö test_database —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        cursor.close()
        conn.close()
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False


def create_enums(database_name):
    """–°–æ–∑–¥–∞–µ–º enum'—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print(f"üîß –°–æ–∑–¥–∞–Ω–∏–µ enum'–æ–≤ –≤ –±–∞–∑–µ {database_name}...")

    try:
        conn = psycopg2.connect(
            host=os.getenv("POSTGRES_HOST", "postgres"),
            port=os.getenv("POSTGRES_PORT", "5432"),
            user=os.getenv("POSTGRES_USER", "my_user"),
            password=os.getenv("POSTGRES_PASSWORD", "my_password"),
            database=database_name,
        )
        conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
        cursor = conn.cursor()

        # –°–æ–∑–¥–∞–µ–º enum'—ã –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        enums = [
            ("taskstatus", "('todo', 'in_progress', 'review', 'done')"),
            ("taskpriority", "('low', 'medium', 'high', 'urgent')"),
            ("articlestatus", "('draft', 'published', 'archived')"),
        ]

        for enum_name, enum_values in enums:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ enum
            cursor.execute("SELECT 1 FROM pg_type WHERE typname = %s", (enum_name,))
            if not cursor.fetchone():
                cursor.execute(f"CREATE TYPE {enum_name} AS ENUM {enum_values}")
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω enum {enum_name}")
            else:
                print(f"‚ÑπÔ∏è Enum {enum_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        print(f"‚úÖ Enum'—ã —Å–æ–∑–¥–∞–Ω—ã –≤ –±–∞–∑–µ {database_name}")

        cursor.close()
        conn.close()
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ enum'–æ–≤ –≤ {database_name}: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

    # –ñ–¥–µ–º PostgreSQL
    if not wait_for_postgres():
        sys.exit(1)

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if not create_test_database():
        sys.exit(1)

    # –°–æ–∑–¥–∞–µ–º enum'—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–∑–µ
    if not create_enums("my_database"):
        sys.exit(1)

    # –°–æ–∑–¥–∞–µ–º enum'—ã –≤ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑–µ
    if not create_enums("test_database"):
        sys.exit(1)

    print("üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")


if __name__ == "__main__":
    main()
