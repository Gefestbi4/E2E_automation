#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ —Å –º–∞—Ä–∫–∏—Ä–æ–≤–∫–æ–π –æ—Ç–ª–∞–¥–∫–∏
"""
import subprocess
import sys
import os
from pathlib import Path


def run_command(command, description):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –≤—ã–≤–æ–¥–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    print(f"\nüîß {description}")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {command}")
    print("-" * 50)

    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)

        if result.stdout:
            print("STDOUT:")
            print(result.stdout)

        if result.stderr:
            print("STDERR:")
            print(result.stderr)

        print(f"–ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {result.returncode}")
        return result.returncode == 0

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å —Å–∏—Å—Ç–µ–º–æ–π –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏")
    print("=" * 60)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not os.path.exists("pytest.ini"):
        print(
            "‚ùå –û—à–∏–±–∫–∞: pytest.ini –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ e2e-automation"
        )
        sys.exit(1)

    # –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤:")
    print("1. –¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (--debug-only)")
    print("2. –¢–æ–ª—å–∫–æ —Å–ª–æ–º–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã (--fixme-only)")
    print("3. –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã")
    print("4. –¢–µ—Å—Ç—ã –≤—ã—Å–æ–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞")
    print("5. Smoke —Ç–µ—Å—Ç—ã")
    print("6. –í—Å–µ —Ç–µ—Å—Ç—ã")
    print("7. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ—Å—Ç")
    print("8. –¢–µ—Å—Ç—ã –º–æ–¥—É–ª—è")

    choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-8): ").strip()

    commands = {
        "1": {
            "cmd": "pytest --debug-only -v --tb=short",
            "desc": "–ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏",
        },
        "2": {
            "cmd": "pytest --fixme-only -v --tb=short",
            "desc": "–ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ —Å–ª–æ–º–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤",
        },
        "3": {
            "cmd": "pytest -m critical -v --tb=short",
            "desc": "–ó–∞–ø—É—Å–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤",
        },
        "4": {
            "cmd": "pytest -m high -v --tb=short",
            "desc": "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤—ã—Å–æ–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞",
        },
        "5": {"cmd": "pytest -m smoke -v --tb=short", "desc": "–ó–∞–ø—É—Å–∫ smoke —Ç–µ—Å—Ç–æ–≤"},
        "6": {"cmd": "pytest -v --tb=short", "desc": "–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"},
        "7": {"cmd": "", "desc": "–ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"},
        "8": {"cmd": "", "desc": "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –º–æ–¥—É–ª—è"},
    }

    if choice in commands:
        if choice == "7":
            test_path = input(
                "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ç–µ—Å—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: tests/test_auth.py::TestLogin::test_successful_login): "
            )
            commands[choice]["cmd"] = f"pytest {test_path} -v --tb=short"

        elif choice == "8":
            print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏:")
            print("- auth (–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è)")
            print("- ecommerce (E-commerce)")
            print("- social (–°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å–µ—Ç—å)")
            print("- tasks (–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏)")
            print("- content (–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º)")
            print("- analytics (–ê–Ω–∞–ª–∏—Ç–∏–∫–∞)")

            module = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è: ").strip().lower()
            commands[choice]["cmd"] = f"pytest -m {module} -v --tb=short"

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
        success = run_command(commands[choice]["cmd"], commands[choice]["desc"])

        if success:
            print("\n‚úÖ –¢–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")

            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —É–±—Ä–∞—Ç—å –º–∞—Ä–∫–µ—Ä—ã debug —Å –ø—Ä–æ—à–µ–¥—à–∏—Ö —Ç–µ—Å—Ç–æ–≤
            if choice in ["1", "2"]:
                remove_markers = (
                    input("\n–£–±—Ä–∞—Ç—å –º–∞—Ä–∫–µ—Ä—ã debug —Å –ø—Ä–æ—à–µ–¥—à–∏—Ö —Ç–µ—Å—Ç–æ–≤? (y/n): ")
                    .strip()
                    .lower()
                )
                if remove_markers == "y":
                    print("\nüîß –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ debug —Å –ø—Ä–æ—à–µ–¥—à–∏—Ö —Ç–µ—Å—Ç–æ–≤...")
                    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤
                    print("–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
        else:
            print("\n‚ùå –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")

    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
        sys.exit(1)


def show_test_summary():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ —Ç–µ—Å—Ç–∞–º"""
    print("\nüìä –°–≤–æ–¥–∫–∞ –ø–æ –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–µ—Å—Ç–∞–º:")
    print("-" * 40)

    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ —Ç–µ—Å—Ç–æ–≤ –ø–æ –º–∞—Ä–∫–µ—Ä–∞–º
    summary = {
        "debug": "–ù–∞–π–¥–µ–Ω–æ X —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏",
        "fixme": "–ù–∞–π–¥–µ–Ω–æ X —Å–ª–æ–º–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤",
        "critical": "–ù–∞–π–¥–µ–Ω–æ X –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤",
        "high": "–ù–∞–π–¥–µ–Ω–æ X —Ç–µ—Å—Ç–æ–≤ –≤—ã—Å–æ–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞",
        "smoke": "–ù–∞–π–¥–µ–Ω–æ X smoke —Ç–µ—Å—Ç–æ–≤",
    }

    for marker, description in summary.items():
        print(f"  {description}")


def cleanup_markers():
    """–û—á–∏—Å—Ç–∫–∞ –º–∞—Ä–∫–µ—Ä–æ–≤ debug —Å –ø—Ä–æ—à–µ–¥—à–∏—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("\nüßπ –û—á–∏—Å—Ç–∫–∞ –º–∞—Ä–∫–µ—Ä–æ–≤ debug...")
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –º–∞—Ä–∫–µ—Ä–æ–≤
    print("–§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –º–∞—Ä–∫–µ—Ä–æ–≤ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")


if __name__ == "__main__":
    try:
        if len(sys.argv) > 1 and sys.argv[1] == "--summary":
            show_test_summary()
        elif len(sys.argv) > 1 and sys.argv[1] == "--cleanup":
            cleanup_markers()
        else:
            main()
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)
