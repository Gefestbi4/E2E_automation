"""
–°–∏—Å—Ç–µ–º–∞ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
"""

import pytest
import os
from typing import List, Set


class TestMarkers:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞–º–∏ —Ç–µ—Å—Ç–æ–≤"""

    DEBUG_MARKERS = {"debug", "fixme"}
    PRIORITY_MARKERS = {"critical", "high", "medium", "low"}
    TYPE_MARKERS = {
        "smoke",
        "regression",
        "api",
        "ui",
        "database",
        "performance",
        "security",
    }
    MODULE_MARKERS = {"auth", "ecommerce", "social", "tasks", "content", "analytics"}

    @classmethod
    def get_debug_tests(cls) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        return cls._get_tests_by_markers(cls.DEBUG_MARKERS)

    @classmethod
    def mark_test_for_debug(cls, test_name: str, reason: str = ""):
        """–ü–æ–º–µ—Ç–∏—Ç—å —Ç–µ—Å—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        cls._add_marker_to_test(test_name, "debug", reason)

    @classmethod
    def mark_test_as_broken(cls, test_name: str, reason: str = ""):
        """–ü–æ–º–µ—Ç–∏—Ç—å —Ç–µ—Å—Ç –∫–∞–∫ —Å–ª–æ–º–∞–Ω–Ω—ã–π"""
        cls._add_marker_to_test(test_name, "fixme", reason)

    @classmethod
    def remove_debug_marker(cls, test_name: str):
        """–£–±—Ä–∞—Ç—å –º–∞—Ä–∫–µ—Ä –æ—Ç–ª–∞–¥–∫–∏ —Å —Ç–µ—Å—Ç–∞"""
        cls._remove_marker_from_test(test_name, cls.DEBUG_MARKERS)

    @classmethod
    def get_tests_by_priority(cls, priority: str) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É"""
        if priority not in cls.PRIORITY_MARKERS:
            raise ValueError(f"Invalid priority: {priority}")
        return cls._get_tests_by_markers({priority})

    @classmethod
    def get_tests_by_type(cls, test_type: str) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç—ã –ø–æ —Ç–∏–ø—É"""
        if test_type not in cls.TYPE_MARKERS:
            raise ValueError(f"Invalid test type: {test_type}")
        return cls._get_tests_by_markers({test_type})

    @classmethod
    def get_tests_by_module(cls, module: str) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç—ã –ø–æ –º–æ–¥—É–ª—é"""
        if module not in cls.MODULE_MARKERS:
            raise ValueError(f"Invalid module: {module}")
        return cls._get_tests_by_markers({module})

    @classmethod
    def _get_tests_by_markers(cls, markers: Set[str]) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç—ã –ø–æ –º–∞—Ä–∫–µ—Ä–∞–º"""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –º–∞—Ä–∫–µ—Ä–∞–º–∏
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤ —Ç–µ—Å—Ç–æ–≤
        return []

    @classmethod
    def _add_marker_to_test(cls, test_name: str, marker: str, reason: str = ""):
        """–î–æ–±–∞–≤–∏—Ç—å –º–∞—Ä–∫–µ—Ä –∫ —Ç–µ—Å—Ç—É"""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞ –∫ —Ç–µ—Å—Ç—É
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è —Ñ–∞–π–ª–∞ —Ç–µ—Å—Ç–∞
        pass

    @classmethod
    def _remove_marker_from_test(cls, test_name: str, markers: Set[str]):
        """–£–±—Ä–∞—Ç—å –º–∞—Ä–∫–µ—Ä—ã —Å —Ç–µ—Å—Ç–∞"""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤ —Å —Ç–µ—Å—Ç–∞
        pass


def pytest_collection_modifyitems(config, items):
    """–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤"""

    # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    debug_only = config.getoption("--debug-only", default=False)
    fixme_only = config.getoption("--fixme-only", default=False)

    if debug_only:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã —Å –º–∞—Ä–∫–µ—Ä–æ–º debug
        selected_items = [item for item in items if item.get_closest_marker("debug")]
        items[:] = selected_items
        print(f"üîç –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏: {len(selected_items)} —Ç–µ—Å—Ç–æ–≤")

    if fixme_only:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã —Å –º–∞—Ä–∫–µ—Ä–æ–º fixme
        selected_items = [item for item in items if item.get_closest_marker("fixme")]
        items[:] = selected_items
        print(f"üîß –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ —Å–ª–æ–º–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {len(selected_items)} —Ç–µ—Å—Ç–æ–≤")

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä–∫–µ—Ä–∞—Ö –≤ –æ—Ç—á–µ—Ç
    for item in items:
        markers = [marker.name for marker in item.iter_markers()]
        if "debug" in markers:
            print(f"üêõ –¢–µ—Å—Ç {item.name} –ø–æ–º–µ—á–µ–Ω –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏")
        if "fixme" in markers:
            print(f"‚ö†Ô∏è  –¢–µ—Å—Ç {item.name} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —Å–ª–æ–º–∞–Ω–Ω—ã–π")


def pytest_addoption(parser):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø—Ü–∏–π –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser.addoption(
        "--debug-only",
        action="store_true",
        default=False,
        help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã —Å –º–∞—Ä–∫–µ—Ä–æ–º debug",
    )
    parser.addoption(
        "--fixme-only",
        action="store_true",
        default=False,
        help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã —Å –º–∞—Ä–∫–µ—Ä–æ–º fixme",
    )
    parser.addoption(
        "--mark-fixed",
        action="store_true",
        default=False,
        help="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–±—Ä–∞—Ç—å –º–∞—Ä–∫–µ—Ä debug —Å –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤",
    )


def pytest_runtest_logreport(report):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
    if report.when == "call" and report.outcome == "passed":
        # –ï—Å–ª–∏ —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª –∏ –µ—Å—Ç—å –æ–ø—Ü–∏—è --mark-fixed
        if hasattr(report, "node") and report.node.get_closest_marker("debug"):
            print(f"‚úÖ –¢–µ—Å—Ç {report.node.name} –ø—Ä–æ—à–µ–ª! –ú–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –º–∞—Ä–∫–µ—Ä debug")


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤
def debug_test(reason: str = ""):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ —Ç–µ—Å—Ç–∞ –∫–∞–∫ —Ç—Ä–µ–±—É—é—â–µ–≥–æ –æ—Ç–ª–∞–¥–∫–∏"""
    return pytest.mark.debug(reason=reason)


def fixme_test(reason: str = ""):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ —Ç–µ—Å—Ç–∞ –∫–∞–∫ —Å–ª–æ–º–∞–Ω–Ω–æ–≥–æ"""
    return pytest.mark.fixme(reason=reason)


def critical_test(reason: str = ""):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    return pytest.mark.critical(reason=reason)


def high_priority(reason: str = ""):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ —Ç–µ—Å—Ç–∞ –≤—ã—Å–æ–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"""
    return pytest.mark.high(reason=reason)


def medium_priority(reason: str = ""):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ —Ç–µ—Å—Ç–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"""
    return pytest.mark.medium(reason=reason)


def low_priority(reason: str = ""):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ —Ç–µ—Å—Ç–∞ –Ω–∏–∑–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"""
    return pytest.mark.low(reason=reason)


def smoke_test(reason: str = ""):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ smoke —Ç–µ—Å—Ç–∞"""
    return pytest.mark.smoke(reason=reason)


def regression_test(reason: str = ""):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    return pytest.mark.regression(reason=reason)


# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏
def get_marked_tests(marker_name: str) -> List[str]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –º–∞—Ä–∫–µ—Ä–æ–º"""
    # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤ —Ç–µ—Å—Ç–æ–≤
    return []


def print_test_summary():
    """–í—ã–≤–µ—Å—Ç–∏ —Å–≤–æ–¥–∫—É –ø–æ –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–µ—Å—Ç–∞–º"""
    print("\nüìä –°–≤–æ–¥–∫–∞ –ø–æ –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–µ—Å—Ç–∞–º:")

    debug_tests = TestMarkers.get_debug_tests()
    if debug_tests:
        print(f"üêõ –¢–µ—Å—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏: {len(debug_tests)}")
        for test in debug_tests:
            print(f"   - {test}")

    print(f"üéØ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã: {len(TestMarkers.get_tests_by_priority('critical'))}")
    print(f"üî• –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {len(TestMarkers.get_tests_by_priority('high'))}")
    print(f"üìä –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {len(TestMarkers.get_tests_by_priority('medium'))}")
    print(f"üìù –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {len(TestMarkers.get_tests_by_priority('low'))}")

    print(f"üí® Smoke —Ç–µ—Å—Ç—ã: {len(TestMarkers.get_tests_by_type('smoke'))}")
    print(f"üîÑ –†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã: {len(TestMarkers.get_tests_by_type('regression'))}")


if __name__ == "__main__":
    print_test_summary()
