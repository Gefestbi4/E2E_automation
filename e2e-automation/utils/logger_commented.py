"""
Test logger utility for E2E automation  # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —É—Ç–∏–ª–∏—Ç—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è E2E –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
"""

import logging  # –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è Python
import os  # –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
from datetime import datetime  # –ò–º–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞ datetime –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
from typing import Optional  # –ò–º–ø–æ—Ä—Ç —Ç–∏–ø–∞ Optional –¥–ª—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π —Ç–∏–ø–æ–≤
from pathlib import Path  # –ò–º–ø–æ—Ä—Ç Path –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—É—Ç—è–º–∏ —Ñ–∞–π–ª–æ–≤


class TestLogger:  # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –ª–æ–≥–≥–µ—Ä–∞ —Ç–µ—Å—Ç–æ–≤
    """Enhanced logger for E2E tests with file and console output"""  # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞

    def __init__(
        self, name: str = "E2E_Test", log_level: str = "INFO"
    ):  # –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞ TestLogger
        self.name = name  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–º–µ–Ω–∏ –ª–æ–≥–≥–µ—Ä–∞
        self.log_level = getattr(
            logging, log_level.upper(), logging.INFO
        )  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.logger = self._setup_logger()  # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
        self.test_start_time = datetime.now()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞

    def _setup_logger(self) -> logging.Logger:  # –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–≥–µ—Ä–∞
        """Setup logger with file and console handlers"""  # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –º–µ—Ç–æ–¥–∞
        logger = logging.getLogger(self.name)  # –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞ –ø–æ –∏–º–µ–Ω–∏
        logger.setLevel(self.log_level)  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

        # Clear existing handlers  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–± –æ—á–∏—Å—Ç–∫–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        logger.handlers.clear()  # –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤

        # Create logs directory if it doesn't exist  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏ –ª–æ–≥–æ–≤
        log_dir = Path("/app/logs")  # –°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Ç–∏ –∫ –ø–∞–ø–∫–µ –ª–æ–≥–æ–≤
        log_dir.mkdir(exist_ok=True)  # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

        # File handler  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ —Ñ–∞–π–ª–æ–≤–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ
        log_file = (
            log_dir / f"e2e_test_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
        )  # –°–æ–∑–¥–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –ª–æ–≥–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
        file_handler = logging.FileHandler(
            log_file, encoding="utf-8"
        )  # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        file_handler.setLevel(
            self.log_level
        )  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞

        # Console handler  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ
        console_handler = logging.StreamHandler()  # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        console_handler.setLevel(
            self.log_level
        )  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞

        # Formatter  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–µ
        formatter = logging.Formatter(  # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞ –ª–æ–≥–æ–≤
            "%(asctime)s - %(name)s - %(levelname)s - %(message)s",  # –§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ª–æ–≥–∞
            datefmt="%Y-%m-%d %H:%M:%S",  # –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
        )
        file_handler.setFormatter(
            formatter
        )  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞ –¥–ª—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        console_handler.setFormatter(
            formatter
        )  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞

        # Add handlers  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        logger.addHandler(file_handler)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫ –ª–æ–≥–≥–µ—Ä—É
        logger.addHandler(
            console_handler
        )  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫ –ª–æ–≥–≥–µ—Ä—É

        return logger  # –í–æ–∑–≤—Ä–∞—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞

    def info(
        self, message: str, extra: Optional[dict] = None
    ):  # –ú–µ—Ç–æ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        """Log info message"""  # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –º–µ—Ç–æ–¥–∞
        self.logger.info(message, extra=extra)  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

    def debug(
        self, message: str, extra: Optional[dict] = None
    ):  # –ú–µ—Ç–æ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        """Log debug message"""  # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –º–µ—Ç–æ–¥–∞
        self.logger.debug(message, extra=extra)  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

    def warning(
        self, message: str, extra: Optional[dict] = None
    ):  # –ú–µ—Ç–æ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
        """Log warning message"""  # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –º–µ—Ç–æ–¥–∞
        self.logger.warning(message, extra=extra)  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è

    def error(
        self, message: str, extra: Optional[dict] = None
    ):  # –ú–µ—Ç–æ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
        """Log error message"""  # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –º–µ—Ç–æ–¥–∞
        self.logger.error(message, extra=extra)  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏

    def critical(
        self, message: str, extra: Optional[dict] = None
    ):  # –ú–µ—Ç–æ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
        """Log critical message"""  # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –º–µ—Ç–æ–¥–∞
        self.logger.critical(message, extra=extra)  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏

    def test_start(self, test_name: str):  # –ú–µ—Ç–æ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞
        """Log test start"""  # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –º–µ—Ç–æ–¥–∞
        self.test_start_time = datetime.now()  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞
        self.info(f"üöÄ Starting test: {test_name}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞ —Å —ç–º–æ–¥–∑–∏

    def test_end(
        self, test_name: str, status: str = "PASSED"
    ):  # –ú–µ—Ç–æ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ—Å—Ç–∞
        """Log test end with duration"""  # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –º–µ—Ç–æ–¥–∞
        duration = (
            datetime.now() - self.test_start_time
        )  # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ—Å—Ç–∞
        status_emoji = (
            "‚úÖ" if status == "PASSED" else "‚ùå"
        )  # –í—ã–±–æ—Ä —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        self.info(  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ—Å—Ç–∞
            f"{status_emoji} Test {status}: {test_name} (Duration: {duration.total_seconds():.2f}s)"
        )

    def step(
        self, step_name: str, step_data: Optional[dict] = None
    ):  # –ú–µ—Ç–æ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–≥–∞ —Ç–µ—Å—Ç–∞
        """Log test step"""  # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –º–µ—Ç–æ–¥–∞
        message = f"üìù Step: {step_name}"  # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —à–∞–≥–µ
        if step_data:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö —à–∞–≥–∞
            message += f" | Data: {step_data}"  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
        self.info(message)  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–≥–∞

    def assertion(  # –ú–µ—Ç–æ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
        self, assertion_name: str, expected: any, actual: any, passed: bool = True
    ):
        """Log assertion result"""  # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –º–µ—Ç–æ–¥–∞
        status = "‚úÖ PASS" if passed else "‚ùå FAIL"  # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.info(  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
            f"{status} Assertion: {assertion_name} | Expected: {expected} | Actual: {actual}"
        )

    def api_request(  # –ú–µ—Ç–æ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è API –∑–∞–ø—Ä–æ—Å–∞
        self,
        method: str,
        url: str,
        status_code: int = None,
        response_time: float = None,
    ):
        """Log API request"""  # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –º–µ—Ç–æ–¥–∞
        message = f"üåê API {method}: {url}"  # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± API –∑–∞–ø—Ä–æ—Å–µ
        if status_code:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—Ç–∞—Ç—É—Å –∫–æ–¥–∞
            message += f" | Status: {status_code}"  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å –∫–æ–¥–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
        if response_time:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
            message += f" | Time: {response_time:.2f}ms"  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
        self.info(message)  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–ø—Ä–æ—Å–∞

    def browser_action(
        self, action: str, element: str = None, value: str = None
    ):  # –ú–µ—Ç–æ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
        """Log browser action"""  # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –º–µ—Ç–æ–¥–∞
        message = f"üñ±Ô∏è Browser: {action}"  # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –¥–µ–π—Å—Ç–≤–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
        if element:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
            message += f" | Element: {element}"  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
        if value:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
            message += f" | Value: {value}"  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
        self.info(message)  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –±—Ä–∞—É–∑–µ—Ä–∞

    def screenshot(self, screenshot_path: str):  # –ú–µ—Ç–æ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        """Log screenshot taken"""  # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –º–µ—Ç–æ–¥–∞
        self.info(
            f"üì∏ Screenshot taken: {screenshot_path}"
        )  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞

    def performance(
        self, metric_name: str, value: float, unit: str = "ms"
    ):  # –ú–µ—Ç–æ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        """Log performance metric"""  # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –º–µ—Ç–æ–¥–∞
        self.info(
            f"‚ö° Performance: {metric_name} = {value:.2f}{unit}"
        )  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

    def error_with_context(
        self, error: Exception, context: str = ""
    ):  # –ú–µ—Ç–æ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–∫–∏ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        """Log error with context"""  # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –º–µ—Ç–æ–¥–∞
        error_msg = (  # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
            f"‚ùå Error in {context}: {str(error)}"  # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            if context  # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç —É–∫–∞–∑–∞–Ω
            else f"‚ùå Error: {str(error)}"  # –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        )
        self.error(error_msg)  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        self.debug(  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –æ—à–∏–±–∫–∏
            f"Error details: {error.__class__.__name__}", extra={"exception": error}
        )

    def test_data(
        self, data_name: str, data_value: any
    ):  # –ú–µ—Ç–æ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        """Log test data usage"""  # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –º–µ—Ç–æ–¥–∞
        self.debug(
            f"üìä Test Data: {data_name} = {data_value}"
        )  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö

    def environment_info(self, info: dict):  # –ú–µ—Ç–æ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–∫—Ä—É–∂–µ–Ω–∏–∏
        """Log environment information"""  # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –º–µ—Ç–æ–¥–∞
        self.info(
            "üîß Environment Info:"
        )  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–∫—Ä—É–∂–µ–Ω–∏–∏
        for key, value in info.items():  # –¶–∏–∫–ª –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–∫—Ä—É–∂–µ–Ω–∏–∏
            self.info(f"  {key}: {value}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è

    def test_summary(  # –ú–µ—Ç–æ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏ —Ç–µ—Å—Ç–æ–≤
        self, total_tests: int, passed: int, failed: int, skipped: int = 0
    ):
        """Log test summary"""  # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –º–µ—Ç–æ–¥–∞
        self.info("üìä Test Summary:")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å–≤–æ–¥–∫–∏
        self.info(f"  Total: {total_tests}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–µ—Å—Ç–æ–≤
        self.info(f"  Passed: {passed} ‚úÖ")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
        self.info(f"  Failed: {failed} ‚ùå")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
        self.info(
            f"  Skipped: {skipped} ‚è≠Ô∏è"
        )  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤

        if total_tests > 0:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Ç–µ—Å—Ç—ã –±—ã–ª–∏ –∑–∞–ø—É—â–µ–Ω—ã
            success_rate = (
                passed / total_tests
            ) * 100  # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
            self.info(
                f"  Success Rate: {success_rate:.1f}%"
            )  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏

    def cleanup(self):  # –ú–µ—Ç–æ–¥ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –ª–æ–≥–≥–µ—Ä–∞
        """Cleanup logger resources"""  # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –º–µ—Ç–æ–¥–∞
        for handler in self.logger.handlers[:]:  # –¶–∏–∫–ª –ø–æ –≤—Å–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º –ª–æ–≥–≥–µ—Ä–∞
            handler.close()  # –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            self.logger.removeHandler(handler)  # –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏–∑ –ª–æ–≥–≥–µ—Ä–∞
