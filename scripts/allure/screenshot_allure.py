#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ Allure –æ—Ç—á–µ—Ç–∞
"""

import os
import time
import requests
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from pathlib import Path


def setup_chrome_driver():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome WebDriver –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤"""
    chrome_options = Options()
    chrome_options.add_argument('--headless')
    chrome_options.add_argument('--no-sandbox')
    chrome_options.add_argument('--disable-dev-shm-usage')
    chrome_options.add_argument('--disable-gpu')
    chrome_options.add_argument('--window-size=1920,1080')  # –ë–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    chrome_options.add_argument('--disable-web-security')
    chrome_options.add_argument('--allow-running-insecure-content')
    chrome_options.add_argument('--force-device-scale-factor=1')
    chrome_options.add_argument('--high-dpi-support=1')
    chrome_options.add_argument('--disable-extensions')
    chrome_options.add_argument('--disable-plugins')
    
    try:
        service = Service(ChromeDriverManager().install())
        driver = webdriver.Chrome(service=service, options=chrome_options)
        return driver
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Chrome WebDriver: {e}")
        return None


def wait_for_allure_server(allure_url, max_attempts=30):
    """–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Allure —Å–µ—Ä–≤–µ—Ä–∞"""
    print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Allure —Å–µ—Ä–≤–µ—Ä–∞ {allure_url}...")
    
    for attempt in range(max_attempts):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            response = requests.get(allure_url, timeout=5)
            if response.status_code == 200:
                print("‚úÖ Allure —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤")
                return True
        except:
            pass
        
        print(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts}...")
        time.sleep(2)
    
    print("‚ùå Allure —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
    return False


def take_allure_screenshot(allure_url, output_file):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ Allure –æ—Ç—á–µ—Ç–∞"""
    driver = setup_chrome_driver()
    if not driver:
        return False
    
    try:
        # URL –æ—Ç—á–µ—Ç–∞
        report_url = f"{allure_url}/allure-docker-service/projects/default/reports/latest/index.html"
        print(f"üìä –û—Ç–∫—Ä—ã—Ç–∏–µ Allure –æ—Ç—á–µ—Ç–∞: {report_url}")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        driver.get(report_url)
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        time.sleep(10)
        
        # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤ –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        driver.execute_script("window.scrollTo(0, 0);")
        time.sleep(2)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        driver.save_screenshot(output_file)
        print(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
        return False
    finally:
        driver.quit()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    allure_url = os.getenv('ALLURE_URL', 'http://localhost:5050')
    allure_reports_dir = os.getenv('ALLURE_REPORTS_DIR', 'allure-reports/latest')
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
    screenshots_dir = Path(allure_reports_dir) / "screenshots"
    screenshots_dir.mkdir(exist_ok=True)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Allure —Å–µ—Ä–≤–µ—Ä–∞
    if not wait_for_allure_server(allure_url):
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Allure —Å–µ—Ä–≤–µ—Ä—É")
        return 1
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    screenshot_file = screenshots_dir / "allure_report_screenshot.png"
    success = take_allure_screenshot(allure_url, screenshot_file)
    
    if success:
        print(f"‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç Allure –æ—Ç—á–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω: {screenshot_file}")
        return 0
    else:
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞")
        return 1


if __name__ == "__main__":
    exit(main())
