#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –≤ Telegram
"""

import os
import json
import requests
from pathlib import Path
from datetime import datetime
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv(Path(__file__).parent.parent / '.env')


def get_test_summary(allure_reports_dir):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ —Ç–µ—Å—Ç–æ–≤ –∏–∑ allure-reports"""
    summary_file = Path(allure_reports_dir) / "widgets" / "summary.json"
    
    if not summary_file.exists():
        print(f"–§–∞–π–ª summary.json –Ω–µ –Ω–∞–π–¥–µ–Ω: {summary_file}")
        return None
    
    try:
        with open(summary_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        summary = {
            'passed': data['statistic']['passed'],
            'failed': data['statistic']['failed'],
            'broken': data['statistic']['broken'],
            'skipped': data['statistic']['skipped'],
            'total': data['statistic']['total'],
            'duration': data['time']['duration']
        }
        return summary
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è summary.json: {e}")
        return None


def send_telegram_message(bot_token, chat_id, message, photo_paths=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    base_url = f"https://api.telegram.org/bot{bot_token}"
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    send_url = f"{base_url}/sendMessage"
    data = {
        'chat_id': chat_id,
        'text': message,
        'parse_mode': 'Markdown',
        'disable_web_page_preview': True
    }
    
    try:
        response = requests.post(send_url, data=data, timeout=30)
        if response.status_code == 200:
            print("üì± –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.status_code} - {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
    if photo_paths:
        for photo_path in photo_paths:
            if os.path.exists(photo_path):
                send_photo_url = f"{base_url}/sendPhoto"
                with open(photo_path, 'rb') as photo:
                    files = {'photo': photo}
                    data = {'chat_id': chat_id, 'caption': 'üìä –°–∫—Ä–∏–Ω—à–æ—Ç Allure –æ—Ç—á–µ—Ç–∞'}
                    response = requests.post(send_photo_url, files=files, data=data, timeout=60)
                    
                    if response.status_code == 200:
                        print(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {photo_path}")
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {response.status_code}")
    
    return True


def format_duration(seconds):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    if seconds < 60:
        return f"{seconds:.1f}—Å"
    elif seconds < 3600:
        minutes = int(seconds // 60)
        secs = int(seconds % 60)
        return f"{minutes}–º {secs}—Å"
    else:
        hours = int(seconds // 3600)
        minutes = int((seconds % 3600) // 60)
        return f"{hours}—á {minutes}–º"


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
    chat_id = os.getenv('TELEGRAM_CHAT_ID')
    allure_results_dir = os.getenv('ALLURE_RESULTS_DIR', 'allure-results')
    allure_reports_dir = os.getenv('ALLURE_REPORTS_DIR', 'allure-reports/latest')
    allure_url = os.getenv('ALLURE_URL', 'http://localhost:5050')
    
    if not bot_token or not chat_id:
        print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –∑–∞–¥–∞–Ω—ã TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID")
        return 1
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ —Ç–µ—Å—Ç–æ–≤
    summary = get_test_summary(allure_reports_dir)
    if not summary:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É —Ç–µ—Å—Ç–æ–≤")
        return 1
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ Allure –æ—Ç—á–µ—Ç–∞
    print("üì∏ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ Allure –æ—Ç—á–µ—Ç–∞...")
    try:
        import subprocess
        result = subprocess.run(['python3', 'scripts/screenshot_local_allure.py'], 
                              capture_output=True, text=True, cwd=os.getcwd())
        if result.returncode == 0:
            print("‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç Allure –æ—Ç—á–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {result.stderr}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    timestamp = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    
    # –≠–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤
    status_emoji = {
        'passed': '‚úÖ',
        'failed': '‚ùå',
        'broken': 'üí•',
        'skipped': '‚è≠Ô∏è'
    }
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    if summary['failed'] > 0 or summary['broken'] > 0:
        overall_status = "‚ùå –ï–°–¢–¨ –û–®–ò–ë–ö–ò"
    elif summary['skipped'] > 0:
        overall_status = "‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ü–£–©–ï–ù–ù–´–ï"
    else:
        overall_status = "‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò"
    
    message = f"""
üß™ *E2E –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã*
üìÖ {timestamp}

{overall_status}

‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {format_duration(summary['duration'] / 1000)}
üìà –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {summary['total']}

üîó *–ö–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏:*
üìä [Allure –æ—Ç—á–µ—Ç - localhost:8080](http://localhost:8080)
üåê [Frontend - localhost:3000](http://localhost:3000)
üîß [Backend API - localhost:5000](http://localhost:5000)

üí° *–°–æ–≤–µ—Ç:* –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫–∏ –≤—ã—à–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ—Ç—á–µ—Ç–∞–º
"""
    
    # –ü–æ–∏—Å–∫ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    photo_paths = []
    screenshots_dir = Path(allure_reports_dir) / "screenshots"
    if screenshots_dir.exists():
        for screenshot_file in screenshots_dir.glob("*.png"):
            photo_paths.append(str(screenshot_file))
            print(f"üì∏ –ù–∞–π–¥–µ–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç: {screenshot_file}")
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    success = send_telegram_message(bot_token, chat_id, message, photo_paths)
    
    if success:
        print("‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
        return 0
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –≤ Telegram")
        return 1


if __name__ == "__main__":
    exit(main())
