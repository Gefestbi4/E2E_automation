services:
  # Database Initialization Service
  db-init:
    build:
      context: ./backend
      dockerfile: Dockerfile.init
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=my_user
      - POSTGRES_PASSWORD=my_password
      - POSTGRES_DB=my_database
    command: python init_db.py
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - e2e_automation_network
    restart: "no"

  # Backend Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    env_file:
      - ./backend/.env
    environment:
      - DATABASE_URL=postgresql://my_user:my_password@postgres:5432/my_database
      - MONGO_URL=mongodb://my_user:my_password@mongodb:27017/my_database
      - REDIS_URL=redis://redis:6379
    command: [ "uvicorn", "app:app", "--host", "0.0.0.0", "--port", "5000", "--reload" ]
    volumes:
      - ./backend:/app
    depends_on:
      - db-init
      - mongodb
      - postgres
      - redis
    networks:
      - e2e_automation_network

  # Frontend Service
  frontend:
    build: ./frontend
    ports:
      - "3000:80"
    environment:
      - API_HOST=backend
      - API_PORT=5000
    depends_on:
      - backend
    networks:
      - e2e_automation_network

  # Database Services
  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_DATABASE=my_database
      - MONGO_INITDB_ROOT_USERNAME=my_user
      - MONGO_INITDB_ROOT_PASSWORD=my_password
    networks:
      - e2e_automation_network

  postgres:
    image: postgres:15
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=my_database
      - POSTGRES_USER=my_user
      - POSTGRES_PASSWORD=my_password
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U my_user -d my_database" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - e2e_automation_network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - e2e_automation_network

  # Selenium Hub
  selenium-hub:
    image: selenium/hub:latest
    container_name: selenium-hub
    ports:
      - "4444:4444"
    environment:
      - GRID_MAX_SESSION=16
      - GRID_BROWSER_TIMEOUT=30
      - GRID_TIMEOUT=30

  # Chrome Node
  node-chrome:
    image: selenium/node-chrome:latest
    container_name: node-chrome
    ports:
      - "5900:5900"
    environment:
      - HUB_HOST=selenium-hub
      - HUB_PORT=4444
      - NODE_MAX_INSTANCES=4
      - NODE_MAX_SESSION=4
      - SE_EVENT_BUS_HOST=selenium-hub
      - SE_EVENT_BUS_PUBLISH_PORT=4442
      - SE_EVENT_BUS_SUBSCRIBE_PORT=4443
    depends_on:
      - selenium-hub

  # Firefox Node
  node-firefox:
    image: selenium/node-firefox:latest
    container_name: node-firefox
    ports:
      - "5901:5900"
    environment:
      - HUB_HOST=selenium-hub
      - HUB_PORT=4444
      - NODE_MAX_INSTANCES=4
      - NODE_MAX_SESSION=4
      - SE_EVENT_BUS_HOST=selenium-hub
      - SE_EVENT_BUS_PUBLISH_PORT=4442
      - SE_EVENT_BUS_SUBSCRIBE_PORT=4443
    depends_on:
      - selenium-hub

  # E2E Tests Service
  e2e-tests:
    build:
      context: .
      dockerfile: ./e2e-automation/Dockerfile
    environment:
      - PYTHONPATH=/app
    volumes:
      - ./allure-results:/app/allure-results
      - ./screenshots:/app/screenshots
    depends_on:
      - frontend
      - backend
      - allure
      - selenium-hub
    command: [ "./run_tests_with_delay.sh" ]
    restart: "no" # Не перезапускать контейнер после завершения
    profiles:
      - testing

  # Allure Server
  allure:
    image: frankescobar/allure-docker-service:latest
    container_name: allure-server
    ports:
      - "5050:5050"
    environment:
      CHECK_RESULTS_EVERY_SECONDS: 1
      KEEP_HISTORY: "true"
      PROJECT_ID: "E2E_automation"
      SECURITY_ENABLED: "false"
      ALLURE_RESULTS_DIR: "/app/allure-results"
      ALLURE_REPORTS_DIR: "/app/allure-reports"
      ALLURE_HISTORY_DIR: "/app/allure-history"
      KEEP_HISTORY_COUNT: 30
      ALLURE_PORT: 5050
      ALLURE_HOST: "0.0.0.0"
    volumes:
      - ./allure-results:/app/allure-results
      - ./allure-reports:/app/allure-reports
      - ./allure-history:/app/allure-history
    restart: always

networks:
  e2e_automation_network:
    driver: bridge

# You can access:
# - Frontend: http://localhost:3000
# - Backend: http://localhost:5000
# - Allure Server: http://localhost:5050
# - Selenium Hub: http://localhost:4444
