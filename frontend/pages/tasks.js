// Task management page module
class TasksModule {
    constructor() {
        this.tasksService = new TasksService();
        this.isInitialized = false;
    }

    async init() {
        if (this.isInitialized) return;

        console.log('Initializing Tasks module...');

        try {
            await this.loadProjects();
            this.bindEvents();
            this.isInitialized = true;
            console.log('Tasks module initialized successfully');
        } catch (error) {
            console.error('Failed to initialize Tasks module:', error);
            throw error;
        }
    }

    async loadProjects() {
        try {
            // Mock data for demo
            const projects = [
                {
                    id: 1,
                    name: 'Demo Project',
                    description: '–î–µ–º–æ-–ø—Ä–æ–µ–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏',
                    status: 'active',
                    tasks_count: 5,
                    completed_tasks: 2
                },
                {
                    id: 2,
                    name: 'Test Project',
                    description: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏',
                    status: 'active',
                    tasks_count: 8,
                    completed_tasks: 3
                }
            ];

            this.renderProjects(projects);
        } catch (error) {
            console.error('Failed to load projects:', error);
            this.renderError('Failed to load projects');
        }
    }

    renderProjects(projects) {
        const tasksElement = document.getElementById('tasks-page');
        if (!tasksElement) return;

        tasksElement.innerHTML = `
            <div class="page-header">
                <h1>Task Management</h1>
                <p>–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏</p>
            </div>

            <div class="tasks-content">
                <div class="projects-section">
                    <div class="section-header">
                        <h2>–ü—Ä–æ–µ–∫—Ç—ã</h2>
                        <button class="btn btn-primary" id="add-project-btn">–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç</button>
                    </div>
                    
                    <div class="projects-grid">
                        ${projects.map(project => `
                            <div class="project-card" data-project-id="${project.id}">
                                <div class="project-header">
                                    <h3 class="project-name">${project.name}</h3>
                                    <span class="project-status status-${project.status}">${project.status}</span>
                                </div>
                                <div class="project-description">
                                    <p>${project.description}</p>
                                </div>
                                <div class="project-stats">
                                    <div class="stat">
                                        <span class="stat-label">–ó–∞–¥–∞—á:</span>
                                        <span class="stat-value">${project.tasks_count}</span>
                                    </div>
                                    <div class="stat">
                                        <span class="stat-label">–í—ã–ø–æ–ª–Ω–µ–Ω–æ:</span>
                                        <span class="stat-value">${project.completed_tasks}</span>
                                    </div>
                                </div>
                                <div class="project-progress">
                                    <div class="progress-bar">
                                        <div class="progress-fill" style="width: ${(project.completed_tasks / project.tasks_count) * 100}%"></div>
                                    </div>
                                    <span class="progress-text">${Math.round((project.completed_tasks / project.tasks_count) * 100)}% –≤—ã–ø–æ–ª–Ω–µ–Ω–æ</span>
                                </div>
                                <div class="project-actions">
                                    <button class="btn btn-secondary btn-sm" onclick="this.viewProject(${project.id})">–û—Ç–∫—Ä—ã—Ç—å</button>
                                    <button class="btn btn-primary btn-sm" onclick="this.addTask(${project.id})">–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É</button>
                                </div>
                            </div>
                        `).join('')}
                    </div>
                </div>

                <div class="quick-actions">
                    <h2>–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h2>
                    <div class="actions-grid">
                        <button class="action-card" id="view-all-tasks">
                            <div class="action-icon">üìã</div>
                            <div class="action-content">
                                <h4>–í—Å–µ –∑–∞–¥–∞—á–∏</h4>
                                <p>–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–¥–∞—á</p>
                            </div>
                        </button>
                        <button class="action-card" id="my-tasks">
                            <div class="action-icon">üë§</div>
                            <div class="action-content">
                                <h4>–ú–æ–∏ –∑–∞–¥–∞—á–∏</h4>
                                <p>–ó–∞–¥–∞—á–∏, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –º–Ω–µ</p>
                            </div>
                        </button>
                        <button class="action-card" id="overdue-tasks">
                            <div class="action-icon">‚è∞</div>
                            <div class="action-content">
                                <h4>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ</h4>
                                <p>–ó–∞–¥–∞—á–∏ —Å –∏—Å—Ç–µ–∫—à–∏–º —Å—Ä–æ–∫–æ–º</p>
                            </div>
                        </button>
                        <button class="action-card" id="reports">
                            <div class="action-icon">üìä</div>
                            <div class="action-content">
                                <h4>–û—Ç—á–µ—Ç—ã</h4>
                                <p>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã</p>
                            </div>
                        </button>
                    </div>
                </div>
            </div>
        `;
    }

    renderError(message) {
        const tasksElement = document.getElementById('tasks-page');
        if (!tasksElement) return;

        tasksElement.innerHTML = `
            <div class="page-header">
                <h1>Task Management</h1>
                <p>–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏</p>
            </div>
            <div class="error-message">
                <p>${message}</p>
                <button class="btn btn-primary" onclick="window.App.modules.tasks.loadProjects()">–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
            </div>
        `;
    }

    bindEvents() {
        // Add project button
        document.addEventListener('click', (e) => {
            if (e.target.id === 'add-project-btn') {
                this.showAddProjectModal();
            }
        });

        // Quick actions
        document.addEventListener('click', (e) => {
            if (e.target.closest('#view-all-tasks')) {
                Toast.info('–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞');
            } else if (e.target.closest('#my-tasks')) {
                Toast.info('–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–æ–∏—Ö –∑–∞–¥–∞—á –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞');
            } else if (e.target.closest('#overdue-tasks')) {
                Toast.info('–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞');
            } else if (e.target.closest('#reports')) {
                Toast.info('–§—É–Ω–∫—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞');
            }
        });
    }

    showAddProjectModal() {
        Toast.info('–§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö');
    }

    onPageShow() {
        console.log('Tasks page shown');
        if (!this.isInitialized) {
            this.init();
        }
    }
}

// Export for global access
window.TasksModule = TasksModule;
