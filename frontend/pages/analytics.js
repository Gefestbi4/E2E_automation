// Analytics page module
class AnalyticsPage {
    constructor() {
        this.currentFilters = {};
        this.charts = {};
        this.init();
    }

    async init() {
        await this.loadDashboard();
        this.setupEventListeners();
    }

    async loadDashboard() {
        try {
            this.showLoading();
            const data = await window.ApiService.getAnalyticsDashboard();
            this.renderDashboard(data);
        } catch (error) {
            console.error('Failed to load analytics dashboard:', error);
            this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏');
        } finally {
            this.hideLoading();
        }
    }

    renderDashboard(data) {
        const container = document.getElementById('analytics-container');
        if (!container) return;

        container.innerHTML = `
            <div class="analytics-header">
                <h1>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</h1>
                <div class="analytics-filters">
                    <select id="timeRange" class="form-control">
                        <option value="7d">–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π</option>
                        <option value="30d" selected>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π</option>
                        <option value="90d">–ü–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π</option>
                        <option value="1y">–ü–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥</option>
                    </select>
                    <select id="metricType" class="form-control">
                        <option value="all" selected>–í—Å–µ –º–µ—Ç—Ä–∏–∫–∏</option>
                        <option value="users">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</option>
                        <option value="revenue">–î–æ—Ö–æ–¥—ã</option>
                        <option value="conversion">–ö–æ–Ω–≤–µ—Ä—Å–∏—è</option>
                    </select>
                </div>
            </div>

            <div class="analytics-grid">
                <div class="metric-card">
                    <div class="metric-icon">üë•</div>
                    <div class="metric-content">
                        <h3>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h3>
                        <div class="metric-value">${data.totalUsers || 0}</div>
                        <div class="metric-change ${data.usersChange >= 0 ? 'positive' : 'negative'}">
                            ${data.usersChange >= 0 ? '+' : ''}${data.usersChange || 0}%
                        </div>
                    </div>
                </div>

                <div class="metric-card">
                    <div class="metric-icon">üí∞</div>
                    <div class="metric-content">
                        <h3>–û–±—â–∏–π –¥–æ—Ö–æ–¥</h3>
                        <div class="metric-value">$${data.totalRevenue || 0}</div>
                        <div class="metric-change ${data.revenueChange >= 0 ? 'positive' : 'negative'}">
                            ${data.revenueChange >= 0 ? '+' : ''}${data.revenueChange || 0}%
                        </div>
                    </div>
                </div>

                <div class="metric-card">
                    <div class="metric-icon">üìà</div>
                    <div class="metric-content">
                        <h3>–ö–æ–Ω–≤–µ—Ä—Å–∏—è</h3>
                        <div class="metric-value">${data.conversionRate || 0}%</div>
                        <div class="metric-change ${data.conversionChange >= 0 ? 'positive' : 'negative'}">
                            ${data.conversionChange >= 0 ? '+' : ''}${data.conversionChange || 0}%
                        </div>
                    </div>
                </div>

                <div class="metric-card">
                    <div class="metric-icon">üõí</div>
                    <div class="metric-content">
                        <h3>–ó–∞–∫–∞–∑—ã</h3>
                        <div class="metric-value">${data.totalOrders || 0}</div>
                        <div class="metric-change ${data.ordersChange >= 0 ? 'positive' : 'negative'}">
                            ${data.ordersChange >= 0 ? '+' : ''}${data.ordersChange || 0}%
                        </div>
                    </div>
                </div>
            </div>

            <div class="charts-section">
                <div class="chart-container">
                    <h3>–î–∏–Ω–∞–º–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h3>
                    <canvas id="usersChart"></canvas>
                </div>
                <div class="chart-container">
                    <h3>–î–∏–Ω–∞–º–∏–∫–∞ –¥–æ—Ö–æ–¥–æ–≤</h3>
                    <canvas id="revenueChart"></canvas>
                </div>
            </div>

            <div class="reports-section">
                <h3>–û—Ç—á–µ—Ç—ã</h3>
                <div class="reports-grid">
                    <div class="report-card">
                        <h4>–û—Ç—á–µ—Ç –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º</h4>
                        <p>–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>
                        <button class="btn btn-primary" onclick="analyticsPage.generateReport('users')">
                            –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç
                        </button>
                    </div>
                    <div class="report-card">
                        <h4>–û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º</h4>
                        <p>–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂ –∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏</p>
                        <button class="btn btn-primary" onclick="analyticsPage.generateReport('sales')">
                            –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç
                        </button>
                    </div>
                    <div class="report-card">
                        <h4>–û—Ç—á–µ—Ç –ø–æ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏</h4>
                        <p>–ê–Ω–∞–ª–∏–∑ –≤–æ—Ä–æ–Ω–∫–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏</p>
                        <button class="btn btn-primary" onclick="analyticsPage.generateReport('conversion')">
                            –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç
                        </button>
                    </div>
                </div>
            </div>
        `;

        this.renderCharts(data);
    }

    renderCharts(data) {
        // Render users chart
        const usersCtx = document.getElementById('usersChart');
        if (usersCtx && data.usersChart) {
            this.charts.users = new Chart(usersCtx, {
                type: 'line',
                data: data.usersChart,
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'top',
                        },
                        title: {
                            display: true,
                            text: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –¥–Ω—è–º'
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }

        // Render revenue chart
        const revenueCtx = document.getElementById('revenueChart');
        if (revenueCtx && data.revenueChart) {
            this.charts.revenue = new Chart(revenueCtx, {
                type: 'bar',
                data: data.revenueChart,
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'top',
                        },
                        title: {
                            display: true,
                            text: '–î–æ—Ö–æ–¥—ã –ø–æ –¥–Ω—è–º'
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }
    }

    setupEventListeners() {
        // Time range filter
        const timeRange = document.getElementById('timeRange');
        if (timeRange) {
            timeRange.addEventListener('change', (e) => {
                this.currentFilters.timeRange = e.target.value;
                this.loadDashboard();
            });
        }

        // Metric type filter
        const metricType = document.getElementById('metricType');
        if (metricType) {
            metricType.addEventListener('change', (e) => {
                this.currentFilters.metricType = e.target.value;
                this.loadDashboard();
            });
        }
    }

    async generateReport(type) {
        try {
            this.showLoading();
            const report = await window.ApiService.getAnalyticsReports({
                type: type,
                ...this.currentFilters
            });

            // Create and download report
            this.downloadReport(report, type);
        } catch (error) {
            console.error('Failed to generate report:', error);
            this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç');
        } finally {
            this.hideLoading();
        }
    }

    downloadReport(report, type) {
        const blob = new Blob([JSON.stringify(report, null, 2)], {
            type: 'application/json'
        });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `analytics-report-${type}-${new Date().toISOString().split('T')[0]}.json`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    }

    showLoading() {
        const container = document.getElementById('analytics-container');
        if (container) {
            container.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...</div>';
        }
    }

    hideLoading() {
        // Loading will be replaced by actual content
    }

    showError(message) {
        const container = document.getElementById('analytics-container');
        if (container) {
            container.innerHTML = `
                <div class="error-message">
                    <h3>–û—à–∏–±–∫–∞</h3>
                    <p>${message}</p>
                    <button class="btn btn-primary" onclick="analyticsPage.loadDashboard()">
                        –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                    </button>
                </div>
            `;
        }
    }
}

// Initialize analytics page
let analyticsPage;
document.addEventListener('DOMContentLoaded', () => {
    if (document.getElementById('analytics-container')) {
        analyticsPage = new AnalyticsPage();
    }
});

// Export for global access
window.AnalyticsPage = AnalyticsPage;