/**
 * API –¥–ª—è –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–≥–∞–º–∏
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ —Å–æ–±—ã—Ç–∏–π –≤ –±—Ä–∞—É–∑–µ—Ä–µ
 */

class TestLogger {
    constructor() {
        this.isTestMode = false;
        this.testLogs = [];
        this.eventListeners = [];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω—ã –ª–∏ –∞–≤—Ç–æ—Ç–µ—Å—Ç—ã
        this.detectTestMode();

        if (this.isTestMode) {
            this.setupTestMode();
        }
    }

    detectTestMode() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–≤
        const testIndicators = [
            // Selenium/WebDriver
            window.navigator.webdriver,
            window.document.documentElement.getAttribute('webdriver'),

            // Playwright
            window.navigator.userAgent.includes('Playwright'),

            // Puppeteer
            window.navigator.userAgent.includes('HeadlessChrome'),

            // Cypress
            window.Cypress,

            // Test environment variables
            window.location.search.includes('test=true'),
            window.location.search.includes('autotest=true'),

            // Custom test markers
            window.isTestEnvironment,
            window.__TEST_MODE__
        ];

        this.isTestMode = testIndicators.some(indicator => !!indicator);

        if (this.isTestMode) {
            console.log('üß™ Test mode detected - enabling enhanced logging');
        }
    }

    setupTestMode() {
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        if (window.Logger) {
            window.Logger.setLogLevel('debug');
            window.Logger.setEnabled(true, true, true);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        this.addTestEventListeners();

        // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º API –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        window.TestLogger = this;
        window.getTestLogs = () => this.getTestLogs();
        window.clearTestLogs = () => this.clearTestLogs();
        window.exportTestLogs = () => this.exportTestLogs();
        window.waitForLog = (filter, timeout = 5000) => this.waitForLog(filter, timeout);
    }

    addTestEventListeners() {
        // –°–ª—É—à–∞–µ–º –≤—Å–µ –ª–æ–≥–∏ –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
        if (window.Logger) {
            const originalTriggerCustomHandlers = window.Logger.triggerCustomHandlers.bind(window.Logger);
            window.Logger.triggerCustomHandlers = (logEntry) => {
                // –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
                originalTriggerCustomHandlers(logEntry);

                // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–µ—Å—Ç–æ–≤—ã–µ –ª–æ–≥–∏
                this.addTestLog(logEntry);
            };
        }

        // –°–ª—É—à–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
        window.addEventListener('test:start', (event) => {
            this.addTestLog({
                timestamp: new Date().toISOString(),
                level: 'info',
                category: 'TEST_START',
                message: 'Test started',
                data: event.detail
            });
        });

        window.addEventListener('test:end', (event) => {
            this.addTestLog({
                timestamp: new Date().toISOString(),
                level: 'info',
                category: 'TEST_END',
                message: 'Test ended',
                data: event.detail
            });
        });

        window.addEventListener('test:step', (event) => {
            this.addTestLog({
                timestamp: new Date().toISOString(),
                level: 'info',
                category: 'TEST_STEP',
                message: event.detail.message || 'Test step',
                data: event.detail
            });
        });
    }

    addTestLog(logEntry) {
        this.testLogs.push({
            ...logEntry,
            testMode: true,
            testTimestamp: Date.now()
        });

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞
        if (this.testLogs.length > 2000) {
            this.testLogs.splice(0, this.testLogs.length - 2000);
        }
    }

    // API –¥–ª—è –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–≤
    getTestLogs(filter = {}) {
        let filteredLogs = this.testLogs;

        if (filter.level) {
            filteredLogs = filteredLogs.filter(log => log.level === filter.level);
        }

        if (filter.category) {
            filteredLogs = filteredLogs.filter(log => log.category === filter.category);
        }

        if (filter.since) {
            const sinceTime = new Date(filter.since).getTime();
            filteredLogs = filteredLogs.filter(log => new Date(log.timestamp).getTime() >= sinceTime);
        }

        if (filter.message) {
            filteredLogs = filteredLogs.filter(log =>
                log.message.toLowerCase().includes(filter.message.toLowerCase())
            );
        }

        if (filter.testId) {
            filteredLogs = filteredLogs.filter(log =>
                log.data && log.data.testId === filter.testId
            );
        }

        return filteredLogs;
    }

    clearTestLogs() {
        this.testLogs = [];
        if (window.Logger) {
            window.Logger.clearLogs();
        }
    }

    exportTestLogs() {
        return {
            testLogs: this.testLogs,
            allLogs: window.Logger ? window.Logger.getLogs() : [],
            sessionId: window.Logger ? window.Logger.getSessionId() : 'unknown',
            exportedAt: new Date().toISOString(),
            testMode: this.isTestMode
        };
    }

    // –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ª–æ–≥–∞
    async waitForLog(filter, timeout = 5000) {
        return new Promise((resolve, reject) => {
            const startTime = Date.now();

            const checkLogs = () => {
                const logs = this.getTestLogs(filter);
                if (logs.length > 0) {
                    resolve(logs[logs.length - 1]);
                    return;
                }

                if (Date.now() - startTime > timeout) {
                    reject(new Error(`Timeout waiting for log: ${JSON.stringify(filter)}`));
                    return;
                }

                setTimeout(checkLogs, 100);
            };

            checkLogs();
        });
    }

    // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    async waitForAsyncOperations(timeout = 5000) {
        return new Promise((resolve) => {
            const startTime = Date.now();

            const checkAsync = () => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ fetch –∑–∞–ø—Ä–æ—Å—ã
                const activeRequests = this.getTestLogs({ category: 'FETCH_REQUEST' });
                const recentRequests = activeRequests.filter(log =>
                    Date.now() - new Date(log.timestamp).getTime() < 1000
                );

                if (recentRequests.length === 0 || Date.now() - startTime > timeout) {
                    resolve();
                    return;
                }

                setTimeout(checkAsync, 100);
            };

            checkAsync();
        });
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ª–æ–≥–æ–≤
    getLogStats() {
        const stats = {
            total: this.testLogs.length,
            byLevel: {},
            byCategory: {},
            byHour: {},
            errors: 0,
            warnings: 0,
            apiCalls: 0,
            userActions: 0
        };

        this.testLogs.forEach(log => {
            // –ü–æ —É—Ä–æ–≤–Ω—è–º
            stats.byLevel[log.level] = (stats.byLevel[log.level] || 0) + 1;

            // –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            stats.byCategory[log.category] = (stats.byCategory[log.category] || 0) + 1;

            // –ü–æ —á–∞—Å–∞–º
            const hour = new Date(log.timestamp).getHours();
            stats.byHour[hour] = (stats.byHour[hour] || 0) + 1;

            // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏
            if (log.level === 'error') stats.errors++;
            if (log.level === 'warn') stats.warnings++;
            if (log.category === 'FETCH_REQUEST') stats.apiCalls++;
            if (log.category === 'USER_ACTION') stats.userActions++;
        });

        return stats;
    }

    // –ü–æ–∏—Å–∫ –ª–æ–≥–æ–≤ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
    searchLogs(pattern) {
        const regex = new RegExp(pattern, 'i');
        return this.testLogs.filter(log =>
            regex.test(log.message) ||
            (log.data && JSON.stringify(log.data).match(regex))
        );
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    getElementLogs(selector) {
        return this.testLogs.filter(log =>
            log.data &&
            (log.data.xpath === selector ||
                log.data.testId === selector ||
                log.data.id === selector)
        );
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ API –∑–∞–ø—Ä–æ—Å–æ–≤
    getApiLogs() {
        return this.testLogs.filter(log =>
            ['FETCH_REQUEST', 'FETCH_RESPONSE', 'FETCH_ERROR', 'API_REQUEST', 'API_SUCCESS', 'API_ERROR'].includes(log.category)
        );
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    getUserActionLogs() {
        return this.testLogs.filter(log =>
            log.category === 'USER_ACTION'
        );
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –æ—à–∏–±–æ–∫
    getErrorLogs() {
        return this.testLogs.filter(log =>
            log.level === 'error'
        );
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
    emitTestEvent(eventType, data = {}) {
        const event = new CustomEvent(`test:${eventType}`, {
            detail: {
                timestamp: new Date().toISOString(),
                ...data
            }
        });

        window.dispatchEvent(event);
    }

    // –ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —à–∞–≥–∞
    markTestStep(stepName, data = {}) {
        this.emitTestEvent('step', {
            step: stepName,
            ...data
        });
    }

    // –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞
    startTest(testName, data = {}) {
        this.emitTestEvent('start', {
            testName: testName,
            ...data
        });
    }

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
    endTest(testName, result = 'passed', data = {}) {
        this.emitTestEvent('end', {
            testName: testName,
            result: result,
            ...data
        });
    }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
new TestLogger();
