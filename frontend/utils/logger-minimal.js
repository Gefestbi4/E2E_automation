/**
 * –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è out of memory
 */

class MinimalLogger {
    constructor() {
        this.logs = [];
        this.maxLogs = 50; // –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–π –ª–∏–º–∏—Ç
        this.logLevel = 'error'; // –¢–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏
        this.enableConsole = false;
        this.enableStorage = false;
        this.enableNetwork = false;

        this.levels = {
            debug: 0,
            info: 1,
            warn: 2,
            error: 3
        };

        this.init();
    }

    init() {
        // –¢–æ–ª—å–∫–æ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
        this.interceptErrors();
        console.log('üîç Minimal Logger initialized');
    }

    log(level, category, message, data = null) {
        // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏
        if (this.levels[level] < this.levels[this.logLevel]) {
            return;
        }

        const logEntry = {
            timestamp: new Date().toISOString(),
            level: level,
            category: category,
            message: message,
            data: data,
            url: window.location.href
        };

        this.logs.push(logEntry);

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞
        if (this.logs.length > this.maxLogs) {
            this.logs.shift();
        }

        // –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
        if (this.enableConsole && level === 'error') {
            console.error(`[${category}] ${message}`, data || '');
        }
    }

    debug(category, message, data = null) {
        this.log('debug', category, message, data);
    }

    info(category, message, data = null) {
        this.log('info', category, message, data);
    }

    warn(category, message, data = null) {
        this.log('warn', category, message, data);
    }

    error(category, message, data = null) {
        this.log('error', category, message, data);
    }

    // –ü–µ—Ä–µ—Ö–≤–∞—Ç —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
    interceptErrors() {
        // JavaScript –æ—à–∏–±–∫–∏
        window.addEventListener('error', (event) => {
            this.error('JAVASCRIPT_ERROR', 'Uncaught JavaScript error', {
                message: event.message,
                filename: event.filename,
                lineno: event.lineno,
                colno: event.colno
            });
        });

        // Promise rejections
        window.addEventListener('unhandledrejection', (event) => {
            this.error('PROMISE_REJECTION', 'Unhandled promise rejection', {
                reason: event.reason
            });
        });
    }

    // API –¥–ª—è –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–≤
    getLogs(filter = {}) {
        let filteredLogs = this.logs;

        if (filter.level) {
            filteredLogs = filteredLogs.filter(log => log.level === filter.level);
        }

        if (filter.category) {
            filteredLogs = filteredLogs.filter(log => log.category === filter.category);
        }

        return filteredLogs;
    }

    clearLogs() {
        this.logs = [];
    }

    exportLogs() {
        return {
            logs: this.logs,
            exportedAt: new Date().toISOString()
        };
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.Logger = new MinimalLogger();

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –º–æ–¥—É–ª–µ–π
if (typeof module !== 'undefined' && module.exports) {
    module.exports = MinimalLogger;
}

