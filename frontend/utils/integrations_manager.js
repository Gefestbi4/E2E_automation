/**
 * Integrations Manager
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–∏–º–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏
 */

class IntegrationsManager {
    constructor() {
        this.apiBase = 'http://localhost:5000';
        this.integrations = {};
        this.isLoading = false;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
     */
    init() {
        this.createIntegrationsUI();
        this.setupEventListeners();
        this.loadIntegrationStatus();
        console.log('üîó Integrations Manager initialized');
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ UI –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
     */
    createIntegrationsUI() {
        const integrationsContainer = document.createElement('div');
        integrationsContainer.className = 'integrations-container';
        integrationsContainer.innerHTML = `
            <div class="integrations-header">
                <h2><i class="fas fa-plug"></i> –í–Ω–µ—à–Ω–∏–µ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏</h2>
                <div class="integrations-actions">
                    <button id="refresh-integrations-btn" class="btn btn-primary">
                        <i class="fas fa-sync"></i> –û–±–Ω–æ–≤–∏—Ç—å
                    </button>
                    <button id="test-all-integrations-btn" class="btn btn-secondary">
                        <i class="fas fa-vial"></i> –¢–µ—Å—Ç –≤—Å–µ—Ö
                    </button>
                </div>
            </div>

            <div class="integrations-content">
                <div class="integrations-sidebar">
                    <div class="integration-categories">
                        <button class="category-btn active" data-category="all">
                            <i class="fas fa-th"></i> –í—Å–µ
                        </button>
                        <button class="category-btn" data-category="email">
                            <i class="fas fa-envelope"></i> Email
                        </button>
                        <button class="category-btn" data-category="sms">
                            <i class="fas fa-sms"></i> SMS
                        </button>
                        <button class="category-btn" data-category="social">
                            <i class="fas fa-share-alt"></i> –°–æ—Ü—Å–µ—Ç–∏
                        </button>
                        <button class="category-btn" data-category="payment">
                            <i class="fas fa-credit-card"></i> –ü–ª–∞—Ç–µ–∂–∏
                        </button>
                        <button class="category-btn" data-category="storage">
                            <i class="fas fa-cloud"></i> –û–±–ª–∞–∫–æ
                        </button>
                        <button class="category-btn" data-category="analytics">
                            <i class="fas fa-chart-bar"></i> –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
                        </button>
                    </div>
                </div>

                <div class="integrations-main">
                    <div class="integrations-overview">
                        <div class="overview-cards">
                            <div class="overview-card">
                                <h3>–í—Å–µ–≥–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π</h3>
                                <div class="card-value" id="total-integrations">--</div>
                            </div>
                            <div class="overview-card">
                                <h3>–ê–∫—Ç–∏–≤–Ω—ã—Ö</h3>
                                <div class="card-value" id="active-integrations">--</div>
                            </div>
                            <div class="overview-card">
                                <h3>–°—Ç–∞—Ç—É—Å</h3>
                                <div class="card-value" id="overall-status">--</div>
                            </div>
                        </div>
                    </div>

                    <div class="integrations-list" id="integrations-list">
                        <div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π...</div>
                    </div>

                    <div class="integration-tools">
                        <div class="tool-section">
                            <h3>–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h3>
                            <div class="quick-actions">
                                <button id="send-test-email-btn" class="btn btn-info">
                                    <i class="fas fa-envelope"></i> –¢–µ—Å—Ç Email
                                </button>
                                <button id="send-test-sms-btn" class="btn btn-warning">
                                    <i class="fas fa-sms"></i> –¢–µ—Å—Ç SMS
                                </button>
                                <button id="post-test-social-btn" class="btn btn-primary">
                                    <i class="fas fa-share"></i> –¢–µ—Å—Ç —Å–æ—Ü—Å–µ—Ç–∏
                                </button>
                                <button id="test-payment-btn" class="btn btn-success">
                                    <i class="fas fa-credit-card"></i> –¢–µ—Å—Ç –ø–ª–∞—Ç–µ–∂–∞
                                </button>
                            </div>
                        </div>

                        <div class="tool-section">
                            <h3>–õ–æ–≥–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π</h3>
                            <div class="logs-container">
                                <select id="log-category" class="form-control">
                                    <option value="email">Email</option>
                                    <option value="sms">SMS</option>
                                    <option value="social_media">–°–æ—Ü—Å–µ—Ç–∏</option>
                                    <option value="payment">–ü–ª–∞—Ç–µ–∂–∏</option>
                                </select>
                                <button id="load-logs-btn" class="btn btn-secondary">–ó–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥–∏</button>
                            </div>
                            <div id="logs-display" class="logs-display">
                                <div class="no-content">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –ª–æ–≥–∏</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;

        this.addStyles();
        document.body.appendChild(integrationsContainer);
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ CSS —Å—Ç–∏–ª–µ–π
     */
    addStyles() {
        const style = document.createElement('style');
        style.textContent = `
            .integrations-container {
                max-width: 1400px;
                margin: 20px auto;
                padding: 20px;
                background: white;
                border-radius: 12px;
                box-shadow: 0 4px 20px rgba(0,0,0,0.1);
            }

            .integrations-header {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 30px;
                padding-bottom: 20px;
                border-bottom: 2px solid #eee;
            }

            .integrations-content {
                display: grid;
                grid-template-columns: 250px 1fr;
                gap: 30px;
            }

            .integrations-sidebar {
                background: #f8f9fa;
                border-radius: 8px;
                padding: 20px;
            }

            .integration-categories {
                display: flex;
                flex-direction: column;
                gap: 5px;
            }

            .category-btn {
                padding: 12px 16px;
                border: none;
                background: transparent;
                color: #666;
                cursor: pointer;
                border-radius: 6px;
                transition: all 0.2s ease;
                display: flex;
                align-items: center;
                gap: 8px;
                text-align: left;
            }

            .category-btn:hover {
                background: #e9ecef;
                color: #333;
            }

            .category-btn.active {
                background: #007bff;
                color: white;
            }

            .integrations-main {
                background: white;
                border-radius: 8px;
                padding: 30px;
            }

            .overview-cards {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                gap: 20px;
                margin-bottom: 30px;
            }

            .overview-card {
                background: #f8f9fa;
                padding: 20px;
                border-radius: 8px;
                text-align: center;
                border-left: 4px solid #007bff;
            }

            .overview-card h3 {
                margin: 0 0 10px 0;
                color: #333;
                font-size: 14px;
            }

            .card-value {
                font-size: 24px;
                font-weight: bold;
                color: #007bff;
            }

            .integrations-list {
                margin-bottom: 30px;
            }

            .integration-item {
                background: #f8f9fa;
                padding: 20px;
                border-radius: 8px;
                margin-bottom: 15px;
                border-left: 4px solid #28a745;
                display: flex;
                justify-content: space-between;
                align-items: center;
            }

            .integration-item.disabled {
                border-left-color: #dc3545;
                opacity: 0.6;
            }

            .integration-info h4 {
                margin: 0 0 5px 0;
                color: #333;
            }

            .integration-info p {
                margin: 0;
                color: #666;
                font-size: 14px;
            }

            .integration-actions {
                display: flex;
                gap: 10px;
            }

            .integration-tools {
                display: grid;
                grid-template-columns: 1fr 1fr;
                gap: 30px;
            }

            .tool-section {
                background: #f8f9fa;
                padding: 20px;
                border-radius: 8px;
            }

            .tool-section h3 {
                margin: 0 0 15px 0;
                color: #333;
            }

            .quick-actions {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
                gap: 10px;
            }

            .logs-container {
                display: flex;
                gap: 10px;
                margin-bottom: 15px;
            }

            .logs-display {
                background: #2d3748;
                color: #e2e8f0;
                padding: 15px;
                border-radius: 6px;
                font-family: 'Courier New', monospace;
                font-size: 12px;
                max-height: 200px;
                overflow-y: auto;
            }

            .log-entry {
                margin-bottom: 5px;
                padding: 2px 0;
            }

            .log-entry.info {
                color: #68d391;
            }

            .log-entry.warning {
                color: #f6e05e;
            }

            .log-entry.error {
                color: #fc8181;
            }

            .btn {
                padding: 8px 16px;
                border: none;
                border-radius: 6px;
                font-weight: 500;
                cursor: pointer;
                transition: all 0.2s ease;
                display: inline-flex;
                align-items: center;
                gap: 6px;
                font-size: 14px;
            }

            .btn-primary {
                background: #007bff;
                color: white;
            }

            .btn-primary:hover {
                background: #0056b3;
            }

            .btn-secondary {
                background: #6c757d;
                color: white;
            }

            .btn-secondary:hover {
                background: #545b62;
            }

            .btn-info {
                background: #17a2b8;
                color: white;
            }

            .btn-info:hover {
                background: #138496;
            }

            .btn-warning {
                background: #ffc107;
                color: #212529;
            }

            .btn-warning:hover {
                background: #e0a800;
            }

            .btn-success {
                background: #28a745;
                color: white;
            }

            .btn-success:hover {
                background: #1e7e34;
            }

            .btn-danger {
                background: #dc3545;
                color: white;
            }

            .btn-danger:hover {
                background: #c82333;
            }

            .form-control {
                padding: 8px 12px;
                border: 1px solid #ddd;
                border-radius: 6px;
                font-size: 14px;
            }

            .loading {
                text-align: center;
                color: #666;
                padding: 20px;
            }

            .no-content {
                text-align: center;
                color: #999;
                padding: 40px;
                font-style: italic;
            }

            .status-indicator {
                display: inline-block;
                width: 8px;
                height: 8px;
                border-radius: 50%;
                margin-right: 5px;
            }

            .status-healthy {
                background: #28a745;
            }

            .status-warning {
                background: #ffc107;
            }

            .status-error {
                background: #dc3545;
            }

            .status-disabled {
                background: #6c757d;
            }

            @media (max-width: 768px) {
                .integrations-content {
                    grid-template-columns: 1fr;
                }
                
                .integrations-sidebar {
                    order: 2;
                }
                
                .integration-categories {
                    flex-direction: row;
                    overflow-x: auto;
                }
                
                .integration-tools {
                    grid-template-columns: 1fr;
                }
                
                .quick-actions {
                    grid-template-columns: 1fr;
                }
            }
        `;
        document.head.appendChild(style);
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        document.querySelectorAll('.category-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                this.switchCategory(e.target.dataset.category);
            });
        });

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
        document.getElementById('refresh-integrations-btn').addEventListener('click', () => {
            this.loadIntegrationStatus();
        });

        // –¢–µ—Å—Ç –≤—Å–µ—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
        document.getElementById('test-all-integrations-btn').addEventListener('click', () => {
            this.testAllIntegrations();
        });

        // –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        document.getElementById('send-test-email-btn').addEventListener('click', () => {
            this.sendTestEmail();
        });

        document.getElementById('send-test-sms-btn').addEventListener('click', () => {
            this.sendTestSMS();
        });

        document.getElementById('post-test-social-btn').addEventListener('click', () => {
            this.postTestSocial();
        });

        document.getElementById('test-payment-btn').addEventListener('click', () => {
            this.testPayment();
        });

        // –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤
        document.getElementById('load-logs-btn').addEventListener('click', () => {
            this.loadLogs();
        });
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
     */
    switchCategory(category) {
        document.querySelectorAll('.category-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        document.querySelector(`[data-category="${category}"]`).classList.add('active');

        this.renderIntegrations(category);
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
     */
    async loadIntegrationStatus() {
        try {
            this.showLoading(true);

            const response = await fetch(`${this.apiBase}/api/integrations/status`, {
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }

            const data = await response.json();
            this.integrations = data.status;
            this.renderOverview();
            this.renderIntegrations('all');

        } catch (error) {
            this.showError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π: ${error.message}`);
        } finally {
            this.showLoading(false);
        }
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±–∑–æ—Ä–∞
     */
    renderOverview() {
        if (!this.integrations) return;

        document.getElementById('total-integrations').textContent = this.integrations.total_integrations || 0;
        document.getElementById('active-integrations').textContent = this.integrations.active_integrations || 0;
        document.getElementById('overall-status').textContent = this.integrations.health_check?.overall_status || 'unknown';
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
     */
    renderIntegrations(category) {
        const container = document.getElementById('integrations-list');

        if (!this.integrations || !this.integrations.integrations) {
            container.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π...</div>';
            return;
        }

        const integrations = this.integrations.integrations;
        let items = [];

        if (category === 'all') {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            Object.entries(integrations).forEach(([cat, services]) => {
                if (typeof services === 'object' && services.enabled !== undefined) {
                    // –û–¥–∏–Ω–æ—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å
                    items.push({ category: cat, service: cat, ...services });
                } else {
                    // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
                    Object.entries(services).forEach(([service, config]) => {
                        items.push({ category: cat, service, ...config });
                    });
                }
            });
        } else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if (integrations[category]) {
                const services = integrations[category];
                if (typeof services === 'object' && services.enabled !== undefined) {
                    items.push({ category, service: category, ...services });
                } else {
                    Object.entries(services).forEach(([service, config]) => {
                        items.push({ category, service, ...config });
                    });
                }
            }
        }

        if (items.length === 0) {
            container.innerHTML = '<div class="no-content">–ù–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</div>';
            return;
        }

        container.innerHTML = items.map(item => `
            <div class="integration-item ${!item.enabled ? 'disabled' : ''}">
                <div class="integration-info">
                    <h4>${item.service} <span class="status-indicator status-${item.status}"></span></h4>
                    <p>${item.provider || item.service} ‚Ä¢ ${item.enabled ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–û—Ç–∫–ª—é—á–µ–Ω–∞'}</p>
                </div>
                <div class="integration-actions">
                    <button class="btn btn-sm btn-secondary" onclick="window.integrationsManager.testIntegration('${item.category}', '${item.service}')">
                        <i class="fas fa-vial"></i> –¢–µ—Å—Ç
                    </button>
                    <button class="btn btn-sm btn-primary" onclick="window.integrationsManager.configureIntegration('${item.category}', '${item.service}')">
                        <i class="fas fa-cog"></i> –ù–∞—Å—Ç—Ä–æ–∏—Ç—å
                    </button>
                </div>
            </div>
        `).join('');
    }

    /**
     * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
     */
    async testIntegration(category, service) {
        try {
            this.showLoading(true);

            const response = await fetch(`${this.apiBase}/api/integrations/test/${category}/${service}`, {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }

            const data = await response.json();

            if (data.result.success) {
                this.showSuccess(`–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${service} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ`);
            } else {
                this.showError(`–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${service} –Ω–µ —É–¥–∞–ª—Å—è: ${data.result.error}`);
            }

        } catch (error) {
            this.showError(`–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: ${error.message}`);
        } finally {
            this.showLoading(false);
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
     */
    configureIntegration(category, service) {
        const config = prompt(`–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è ${service} (JSON):`, '{"enabled": true}');
        if (config) {
            try {
                const parsedConfig = JSON.parse(config);
                this.updateIntegrationConfig(category, service, parsedConfig);
            } catch (error) {
                this.showError('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON');
            }
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
     */
    async updateIntegrationConfig(category, service, config) {
        try {
            const response = await fetch(`${this.apiBase}/api/integrations/configure/${category}/${service}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
                },
                body: JSON.stringify({ config })
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }

            this.showSuccess(`–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ${service} –æ–±–Ω–æ–≤–ª–µ–Ω–∞`);
            this.loadIntegrationStatus();

        } catch (error) {
            this.showError(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${error.message}`);
        }
    }

    /**
     * –¢–µ—Å—Ç –≤—Å–µ—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
     */
    async testAllIntegrations() {
        try {
            this.showLoading(true);
            this.showSuccess('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –∑–∞–ø—É—â–µ–Ω–æ...');

            // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            await new Promise(resolve => setTimeout(resolve, 2000));

            this.showSuccess('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');

        } catch (error) {
            this.showError(`–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`);
        } finally {
            this.showLoading(false);
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ email
     */
    async sendTestEmail() {
        try {
            const response = await fetch(`${this.apiBase}/api/integrations/email/send`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
                },
                body: JSON.stringify({
                    to: 'test@example.com',
                    subject: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
                    body: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π'
                })
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }

            const data = await response.json();
            this.showSuccess('–¢–µ—Å—Ç–æ–≤—ã–π email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');

        } catch (error) {
            this.showError(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: ${error.message}`);
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ SMS
     */
    async sendTestSMS() {
        try {
            const response = await fetch(`${this.apiBase}/api/integrations/sms/send`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
                },
                body: JSON.stringify({
                    to: '+1234567890',
                    message: '–¢–µ—Å—Ç–æ–≤–æ–µ SMS —Å–æ–æ–±—â–µ–Ω–∏–µ'
                })
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }

            this.showSuccess('–¢–µ—Å—Ç–æ–≤–æ–µ SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');

        } catch (error) {
            this.showError(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS: ${error.message}`);
        }
    }

    /**
     * –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞ –≤ —Å–æ—Ü—Å–µ—Ç–∏
     */
    async postTestSocial() {
        try {
            const response = await fetch(`${this.apiBase}/api/integrations/social-media/post`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
                },
                body: JSON.stringify({
                    platform: 'twitter',
                    content: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –∏–∑ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π #test'
                })
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }

            this.showSuccess('–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');

        } catch (error) {
            this.showError(`–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ${error.message}`);
        }
    }

    /**
     * –¢–µ—Å—Ç –ø–ª–∞—Ç–µ–∂–∞
     */
    async testPayment() {
        try {
            const response = await fetch(`${this.apiBase}/api/integrations/payment/process`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
                },
                body: JSON.stringify({
                    amount: 1.00,
                    currency: 'USD',
                    payment_method: 'card',
                    customer_id: 'test_customer'
                })
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }

            this.showSuccess('–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ');

        } catch (error) {
            this.showError(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: ${error.message}`);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤
     */
    async loadLogs() {
        const category = document.getElementById('log-category').value;

        try {
            const response = await fetch(`${this.apiBase}/api/integrations/logs/${category}/default?limit=20`, {
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }

            const data = await response.json();
            this.renderLogs(data.logs);

        } catch (error) {
            this.showError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤: ${error.message}`);
        }
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–æ–≤
     */
    renderLogs(logs) {
        const container = document.getElementById('logs-display');

        if (logs.length === 0) {
            container.innerHTML = '<div class="no-content">–õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
            return;
        }

        container.innerHTML = logs.map(log => `
            <div class="log-entry ${log.level.toLowerCase()}">
                [${log.timestamp}] ${log.level}: ${log.message}
            </div>
        `).join('');
    }

    /**
     * –ü–æ–∫–∞–∑ –∑–∞–≥—Ä—É–∑–∫–∏
     */
    showLoading(show) {
        const container = document.querySelector('.integrations-container');
        if (show) {
            container.style.opacity = '0.6';
            container.style.pointerEvents = 'none';
        } else {
            container.style.opacity = '1';
            container.style.pointerEvents = 'auto';
        }
    }

    /**
     * –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏
     */
    showError(message) {
        if (window.Toast && typeof window.Toast.error === 'function') {
            window.Toast.error(message);
        } else {
            alert(`–û—à–∏–±–∫–∞: ${message}`);
        }
    }

    /**
     * –ü–æ–∫–∞–∑ —É—Å–ø–µ—Ö–∞
     */
    showSuccess(message) {
        if (window.Toast && typeof window.Toast.success === 'function') {
            window.Toast.success(message);
        } else {
            alert(`–£—Å–ø–µ—Ö: ${message}`);
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
console.log('üîó IntegrationsManager class defined:', typeof IntegrationsManager);
window.IntegrationsManager = IntegrationsManager;
window.integrationsManager = new IntegrationsManager();
console.log('üîó IntegrationsManager exported to window:', typeof window.IntegrationsManager);
